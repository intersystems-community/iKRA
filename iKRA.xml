<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.1 (Build 617U)" ts="2017-04-02 20:54:45">
<Class name="ikra.Dictionary.Category">
<Super>%Persistent</Super>
<TimeChanged>63899,74282.76398</TimeChanged>
<TimeCreated>63897,42111.849257</TimeCreated>

<Property name="CtgName">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Dictionary.CategoryD</DataLocation>
<DefaultData>CategoryDefaultData</DefaultData>
<IdLocation>^ikra.Dictionary.CategoryD</IdLocation>
<IndexLocation>^ikra.Dictionary.CategoryI</IndexLocation>
<StreamLocation>^ikra.Dictionary.CategoryS</StreamLocation>
<Data name="CategoryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CtgName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Dictionary.Domains">
<Super>%Persistent</Super>
<TimeChanged>63942,56389.176099</TimeChanged>
<TimeCreated>63942,56108.020401</TimeCreated>

<Property name="dmnName">
<Type>%String</Type>
</Property>

<Index name="indDmnNm">
<Properties>dmnName</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Dictionary.DomainsD</DataLocation>
<DefaultData>DomainsDefaultData</DefaultData>
<IdLocation>^ikra.Dictionary.DomainsD</IdLocation>
<IndexLocation>^ikra.Dictionary.DomainsI</IndexLocation>
<StreamLocation>^ikra.Dictionary.DomainsS</StreamLocation>
<Data name="DomainsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>dmnName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Dictionary.EMarker">
<Super>%Persistent</Super>
<TimeChanged>63899,74282.900995</TimeChanged>
<TimeCreated>63897,42512.063504</TimeCreated>

<Property name="EName">
<Type>%String</Type>
</Property>

<Property name="EValue">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Dictionary.EMarkerD</DataLocation>
<DefaultData>EMarkerDefaultData</DefaultData>
<IdLocation>^ikra.Dictionary.EMarkerD</IdLocation>
<IndexLocation>^ikra.Dictionary.EMarkerI</IndexLocation>
<StreamLocation>^ikra.Dictionary.EMarkerS</StreamLocation>
<Data name="EMarkerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EName</Value>
</Value>
<Value name="3">
<Value>EValue</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Dictionary.Fmarker">
<Super>%Persistent</Super>
<TimeChanged>63899,74283.02987</TimeChanged>
<TimeCreated>63897,42386.838795</TimeCreated>

<Property name="FName">
<Type>%String</Type>
</Property>

<Property name="CtgID">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Dictionary.FmarkerD</DataLocation>
<DefaultData>FmarkerDefaultData</DefaultData>
<IdLocation>^ikra.Dictionary.FmarkerD</IdLocation>
<IndexLocation>^ikra.Dictionary.FmarkerI</IndexLocation>
<StreamLocation>^ikra.Dictionary.FmarkerS</StreamLocation>
<Data name="FmarkerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FName</Value>
</Value>
<Value name="3">
<Value>CtgID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Dictionary.Load">
<Super>%Persistent</Super>
<TimeChanged>64316,3304.168117</TimeChanged>
<TimeCreated>63897,44888.806336</TimeCreated>

<Method name="LoadFunctional">
<ClassMethod>1</ClassMethod>
<FormalSpec>sFolder:%String="C:\InterSystems\Cache\CSP\ikra\Load\Fmarkers.txt"</FormalSpec>
<Implementation><![CDATA[
	set cid = 0
	set stream = ##class(%Stream.FileCharacter).%New()
	set sc = stream.LinkToFile(sFolder)
	while 'stream.AtEnd {
		set str = stream.ReadLine()
		if (($piece(str, "#", 1) = "i") && ($piece(str, "#", 2) '= "END")) {
			set cName = $piece(str, "#", 2)
			&sql(INSERT INTO ikra_Dictionary.Category(CtgName) VALUES(:cName))
			&sql(SELECT ID INTO :cid FROM ikra_Dictionary.Category WHERE CtgName = :cName)
		}
		elseif ($piece(str, "#", 1) = "t") {
			set fName = $piece(str, "#", 2)
			&sql(INSERT INTO ikra_Dictionary.Fmarker(FName, CtgID) VALUES(:fName, :cid))
		}
	}
]]></Implementation>
</Method>

<Method name="LoadEmotion">
<ClassMethod>1</ClassMethod>
<FormalSpec>sFolder:%String="C:\InterSystems\Cache\CSP\ikra\Load\Emarkers.txt"</FormalSpec>
<Implementation><![CDATA[
	set stream = ##class(%Stream.FileCharacter).%New()
	set sc = stream.LinkToFile(sFolder)
	while 'stream.AtEnd {
		set str = stream.ReadLine()
		set eVal = $piece(str, "#", 1)
		set cName = $piece(str, "#", 2)
		set i = 1
		while ($piece(cName, ",", i) '= "") {
			set eName = $piece(cName, ",", i)
			set i = i + 1
			&sql(INSERT INTO ikra_Dictionary.EMarker(EName, EValue) VALUES(:eName, :eVal))
		}
	}
]]></Implementation>
</Method>

<Method name="DellFunctional">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ##class(ikra.Dictionary.Category).%KillExtent()
	do ##class(ikra.Dictionary.Fmarker).%KillExtent()
	/*&sql(DELETE FROM ikra_Dictionary.Category)
	&sql(DELETE FROM ikra_Dictionary.FMarker)*/
]]></Implementation>
</Method>

<Method name="DellEmotion">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ##class(ikra.Dictionary.EMarker).%KillExtent()
	/*&sql(DELETE FROM ikra_Dictionary.EMarker)*/
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Dictionary.LoadD</DataLocation>
<DefaultData>LoadDefaultData</DefaultData>
<IdLocation>^ikra.Dictionary.LoadD</IdLocation>
<IndexLocation>^ikra.Dictionary.LoadI</IndexLocation>
<StreamLocation>^ikra.Dictionary.LoadS</StreamLocation>
<Data name="LoadDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Dictionary.MarksReview">
<Super>%Persistent</Super>
<TimeChanged>63930,53279.687681</TimeChanged>
<TimeCreated>63897,42759.824215</TimeCreated>

<Property name="DomainID">
<Type>%Integer</Type>
</Property>

<Property name="UID">
<Type>%Integer</Type>
</Property>

<Property name="RID">
<Type>%Integer</Type>
</Property>

<Property name="CtgID">
<Type>%Integer</Type>
</Property>

<Property name="Mark">
<Type>%Numeric</Type>
</Property>

<Index name="fkMR">
<PrimaryKey>1</PrimaryKey>
<Properties>DomainID,UID,RID,CtgID</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.DictioD092.MarksReviewD</DataLocation>
<DefaultData>MarksReviewDefaultData</DefaultData>
<IdLocation>^ikra.DictioD092.MarksReviewD</IdLocation>
<IndexLocation>^ikra.DictioD092.MarksReviewI</IndexLocation>
<StreamLocation>^ikra.DictioD092.MarksReviewS</StreamLocation>
<Data name="MarksReviewDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DomainID</Value>
</Value>
<Value name="3">
<Value>UID</Value>
</Value>
<Value name="4">
<Value>RID</Value>
</Value>
<Value name="5">
<Value>CtgID</Value>
</Value>
<Value name="6">
<Value>Mark</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Dictionary.MarksUnit">
<Super>%Persistent</Super>
<TimeChanged>63930,56868.18777</TimeChanged>
<TimeCreated>63897,42881.228071</TimeCreated>

<Property name="DomainID">
<Type>%Integer</Type>
</Property>

<Property name="UID">
<Type>%Integer</Type>
</Property>

<Property name="UName">
<Type>%String</Type>
</Property>

<Property name="CtgID">
<Type>%Integer</Type>
</Property>

<Property name="Mark">
<Type>%Numeric</Type>
</Property>

<Index name="fkMU">
<PrimaryKey>1</PrimaryKey>
<Properties>DomainID,UID,CtgID</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Dictionary.MarksUnitD</DataLocation>
<DefaultData>MarksUnitDefaultData</DefaultData>
<IdLocation>^ikra.Dictionary.MarksUnitD</IdLocation>
<IndexLocation>^ikra.Dictionary.MarksUnitI</IndexLocation>
<StreamLocation>^ikra.Dictionary.MarksUnitS</StreamLocation>
<Data name="MarksUnitDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DomainID</Value>
</Value>
<Value name="3">
<Value>UID</Value>
</Value>
<Value name="4">
<Value>UName</Value>
</Value>
<Value name="5">
<Value>CtgID</Value>
</Value>
<Value name="6">
<Value>Mark</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Hotels.Loader">
<Description>
Class to load hotel data from globals, create iKnow domain for use in iKRA</Description>
<IncludeCode>%IKPublic</IncludeCode>
<TimeChanged>63949,59654.539327</TimeChanged>
<TimeCreated>63944,45934.078273</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// do ##class(ikra.Hotels.Loader).Free("Hotels")

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// do ##class(ikra.Hotels.Loader).Load("Hotels","/tmp/Load/Hotels",1,100)

]]></Content>
</UDLText>

<Method name="Load">
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,domFolder:%String,FromId:%Integer=1,ToId:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	// Check the input parameters for validity
	if (((ToId '= 0) & (FromId > ToId)) || (FromId <= 0) || (ToId < 0)) 
	{
		write "Wrong parameters FromID|ToID.", !	
		return $$$ERROR()
	}

	write "Loading started at: ", $zdatetime($horolog), !
	
	// If the domain does not exist, create a new (also creating a configuration)
	do ##class(ikra.util.main).CreateDomainIfNotExists(domName, domFolder)
	set domId = ##class(%iKnow.Domain).GetOrCreateId(domName)
	// Set the name of configuration	
	#dim confName As %String = "Conf"_domName
	
	set lister = ##class(%iKnow.Source.SQL.Lister).%New(domId)
	do lister.SetConfig(confName)	
	#dim initialNumOfSources As %Integer = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(domId)
	
	
	set loader = ##class(%iKnow.Source.Loader).%New(domId)
	
	// Crating the Metadata fields	
	do ..SetMetaDataFields(domName)	
	
	set myquery = "SELECT ID1 As ID, hotel_id as UnitId, hotel_name As UnitName, review_text as reviewText,"_
				  " rating as AuthorRating FROM Nui.hreview"
	
	// Form a query in accordance with the input parameters
	if (ToId > 0) 						{ set myquery = myquery_" Where ID1 >= "_FromId_" AND ID1 <= "_ToId }
	elseif ((FromId > 1) && (ToId = 0)) { set myquery = myquery_" Where ID1 >= "_FromId }
	
	// Forming batch
	// =================
	set meta = $lb("UnitId", "UnitName", "AuthorRating")
	set data = $lb("reviewText")
	set group = "ID"
	set id = "ID"
	
	set tSC = lister.AddListToBatch(myquery, id, group, data, meta)
    
    if (tSC '= $$$OK) { 
    	write "The lister failed: ",$System.Status.DisplayError(tSC)
    	return tSC 
    }
    // =================
      
    write "Adding List to Batch Complete!", !
    	
    set tSC = loader.ProcessBatch()      
    
    // In the event of an error, the process should not be interrupted, since errors can be harmless.
    if (tSC '= $$$OK) { 
    	write "The loader failed: ", $System.Status.DisplayError(tSC) 
    }
    
	#dim numOfSources As %Integer = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(domId)
	
	write !, "Loading finished at: ", $zdatetime($horolog), !
			
	write !, "Initial Number of Sources: ", initialNumOfSources, !
	write "Sources Added: ", numOfSources - initialNumOfSources, !
	write "Total: ", numOfSources,!
		
	return numOfSources - initialNumOfSources
]]></Implementation>
</Method>

<Method name="SetMetaDataFields">
<Description>
Method of setting the metadata fields for reviews
domName - Domain name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set domainId = ##class(ikra.util.main).GetDomainId(domName)
	
	// Setting the metadata fields
	do ##class(%iKnow.Queries.MetadataAPI).AddField(domainId,"UnitId",,$$$MDDTSTRING)
	do ##class(%iKnow.Queries.MetadataAPI).AddField(domainId,"UnitName",,$$$MDDTSTRING)
	do ##class(%iKnow.Queries.MetadataAPI).AddField(domainId,"AuthorRating",,$$$MDDTSTRING)
	
	write "Metadata fields added.", !
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="RemoveMetaDataFields">
<Description>
Method of deleting metadata fields from specified domain
domName - Domain name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set domainId = ##class(ikra.util.main).GetDomainId(domName)
	
	set tSC = ##class(%iKnow.Queries.MetadataAPI).RemoveField(domainId, "UnitId")
	set tSC = tSC + ##class(%iKnow.Queries.MetadataAPI).RemoveField(domainId, "UnitName")
	set tSC = tSC + ##class(%iKnow.Queries.MetadataAPI).RemoveField(domainId, "AuthorRating")
	
	if (tSC = 3) { write "all metadata fields are deleted", ! }
	else { write "errors in deleting metadata fields", ! }
		
	return tSC
]]></Implementation>
</Method>

<Method name="Free">
<Description>
Method of deleting a domain with all environment</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill ^ikraDomainFolder(domName)
	kill ^preferences
	#dim confName As %String = "Conf"_domName
	
	do ..RemoveMetaDataFields(domName)	
	do ##class(ikra.util.main).DeleteDictionaries(domName)			
	do ##class(ikra.util.main).DeleteBlackLists(domName, "GeneralBlackList")	
	
	set tSC = ##class(ikra.util.main).DeleteConfiguration(confName)
	
	if (tSC '= $$$OK) { write "Cannot delete configuration :", confName, $System.Status.DisplayError(tSC), ! }
	
	// Kill Extent of all classes
	do ##class(ikra.Dictionary.MarksUnit).%KillExtent()
	do ##class(ikra.Dictionary.MarksReview).%KillExtent()

	set tSC = ##class(ikra.util.main).DeleteDomain(domName)
	if (tSC '= $$$OK) { write "Can't delete domain :", domName, $System.Status.DisplayError(tSC), ! }
	write "ok", !
	return tSC
]]></Implementation>
</Method>
</Class>


<Class name="ikra.Phones.Loader">
<IncludeCode>%IKPublic</IncludeCode>
<TimeChanged>64374,61806.272129</TimeChanged>
<TimeCreated>63702,54395.292655</TimeCreated>

<Method name="Load">
<Description>
Method of loading reviews domain.
domName - Domain name.
domFolder - folder for creating a configuration.. Contains dictionaries, blacklists, etc.
For example, with call: do ##class(ikra.Phones.loader).Load("Phone", "D:\intuersystems\wPhones")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String="Phones",domFolder:%String="C:\InterSystems\Cache\CSP\ikra\Load\"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	write "Loading started at: ", $zdatetime($horolog), !
	
	// If the domain does not exist, create a new (also creating a configuration)
	do ##class(ikra.util.main).CreateDomainIfNotExists(domName, domFolder)
	set domId = ##class(%iKnow.Domain).GetOrCreateId(domName)
	// Set the name of configuration	
	#dim confName As %String = "Conf"_domName
	
	#dim lister As %iKnow.Source.File.Lister = ##class(%iKnow.Source.File.Lister).%New(domId)	
	do lister.SetConfig(confName)
	#dim initialNumOfSources As %Integer = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(domId)
	write "   lister created!",!
	
	//do lister.SetConfig(confName)
	set loader = ##class(%iKnow.Source.Loader).%New(domId)
	
	// Crating the Metadata fields	
	do ..SetMetaDataFields(domName)	
	
	// Forming batch
	// =================
	
	set pth = domFolder_"Sources.txt"
	set stream = ##class(%Stream.FileCharacter).%New()
	set sc=stream.LinkToFile(pth)
	write "Link to file status: ",sc,!
	write "Loading data from sources ...",!
	set i = 0
	while 'stream.AtEnd {
		set line = stream.ReadLine()
		if ($piece(line, "#", 1) = "phone"){
			set pId = $piece(line, "#", 2)
			set pName = $piece(line, "#", 3)
		} elseif ($piece(line, "#", 1) = "data") {
			set i = i + 1
			set AutRat = $extract(line, $locate(line,"\(")+1, $locate(line,"\)")-1)
			set tSC=lister.AddListToBatch($piece(line, "#", 2),$LB("txt"),0,"")
			if (tSC '= $$$OK) { 
    			write "The lister failed: ",$System.Status.DisplayError(tSC)
    			return tSC 
    		}
    		// Insert/update record in ikra_Phones_Stat.Review
			&sql(INSERT OR UPDATE INTO ikra_Phones_Stat.Review 
		 		(DomainName, SourceId, AuthorRating, PhoneId)
		  		VALUES (:domName, :i, NULLIF({fn CONVERT(:AutRat,SQL_INTEGER)} ,0), {fn CONVERT(:pId,SQL_INTEGER)}))
			if (SQLCODE '= 0) {
				zw SQLCODE
				write "Error saving review #", i, !
			}
			
			set domID = ##class(ikra.util.main).GetDomainId(domName)
			&sql(INSERT OR UPDATE INTO ikra_Dictionary.MarksReview
		 		(DomainID, UID, RID, CtgID, Mark)
		  		VALUES (:domID, {fn CONVERT(:pId,SQL_INTEGER)}, :i, 1, 0))
			if (SQLCODE '= 0) {
				zw SQLCODE
				write "Error saving MarksReview #", i, !
			}
		}
	}
	
    // =================
      
    write "Adding List to Batch Complete!", !
    	
    set tSC = loader.ProcessBatch()      
    
    // In the event of an error, the process should not be interrupted, since errors can be harmless.
    if (tSC '= $$$OK) { 
    	write "The loader failed: ", $System.Status.DisplayError(tSC) 
    }
    
	#dim numOfSources As %Integer = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(domId)
	
	set pth = domFolder_"Metadata.txt"
	set stream = ##class(%Stream.FileCharacter).%New()
	set sc=stream.LinkToFile(pth)
	write "Link to file status: ",sc,!
	write "Loading data from sources ...",!
	while 'stream.AtEnd {
		set line = stream.ReadLine()
		set $list(MetDat, *+1) = $LB($piece(line, "#", 1), $piece(line, "#", 2), $piece(line, "#", 3), $piece(line, "#", 4))
	}
	
	// Loop through all sources to fill ikra_Phones_Stat.Review table
	for i = initialNumOfSources+1:1:numOfSources 
	{
		set externalId = ##class(%iKnow.Queries.SourceAPI).GetExternalId(domId, i)
		
		for j = 1:1:$LL(MetDat){
			if ((i >= $list($list(MetDat, j), 1)) && (i <= $list($list(MetDat, j), 2))){
				&sql(
					SELECT AuthorRating INTO :AutRat
					FROM  ikra_Phones_Stat.Review  
					WHERE SourceId = :i)
				do ##class(%iKnow.Queries.MetadataAPI).SetValue(domId, "UnitId", externalId, $list($list(MetDat, j), 3))
				do ##class(%iKnow.Queries.MetadataAPI).SetValue(domId, "UnitName", externalId, $list($list(MetDat, j), 4))
				do ##class(%iKnow.Queries.MetadataAPI).SetValue(domId, "AuthorRating", externalId, AutRat)
				write "   In loader phone name is: "_$list($list(MetDat, j), 4)_" ar("_AutRat_") pId = "_$list($list(MetDat, j), 3), !
			}
		}	
	}
	
	write !, "Loading finished at: ", $zdatetime($horolog), !
				
	write !, "Initial Number of Sources: ", initialNumOfSources, !
	write "Sources Added: ", numOfSources - initialNumOfSources, !
	write "Total: ", numOfSources,!
	
	do ##class(ikra.Dictionary.Load).LoadFunctional()
	write !, "Functional markers loaded"
	do ##class(ikra.Dictionary.Load).LoadEmotion()
	write !, "Emotion markers loaded"
		
	return numOfSources - initialNumOfSources
]]></Implementation>
</Method>

<Method name="SetMetaDataFields">
<Description>
Method of setting the metadata fields for reviews
domName - Domain name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set domainId = ##class(ikra.util.main).GetDomainId(domName)
	
	// Setting the metadata fields
	do ##class(%iKnow.Queries.MetadataAPI).AddField(domainId,"UnitId",,$$$MDDTSTRING)
	do ##class(%iKnow.Queries.MetadataAPI).AddField(domainId,"UnitName",,$$$MDDTSTRING)
	do ##class(%iKnow.Queries.MetadataAPI).AddField(domainId,"AuthorRating",,$$$MDDTSTRING)
	
	write "Metadata fields added.", !
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="RemoveMetaDataFields">
<Description>
Method of deleting metadata fields from specified domain
domName - Domain name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set domainId = ##class(ikra.util.main).GetDomainId(domName)
	
	set tSC = ##class(%iKnow.Queries.MetadataAPI).RemoveField(domainId, "PhoneId")
	set tSC = tSC + ##class(%iKnow.Queries.MetadataAPI).RemoveField(domainId, "PhoneName")
	
	if (tSC = 2) { write "all metadata fields are deleted", ! }
	else { write "errors in deleting metadata fields", ! }
		
	return tSC
]]></Implementation>
</Method>

<Method name="Free">
<Description>
Method of deleting a domain with all environment</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String="Phones"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill ^ikraDomainFolder(domName)
	kill ^preferences
	#dim confName As %String = "Conf"_domName
	
	do ..RemoveMetaDataFields(domName)	
	do ##class(ikra.util.main).DeleteDictionaries(domName)			
	do ##class(ikra.util.main).DeleteBlackLists(domName, "GeneralBlackList")	
	
	set tSC = ##class(ikra.util.main).DeleteConfiguration(confName)
	
	if (tSC '= $$$OK) { write "Cannot delete configuration :", confName, $System.Status.DisplayError(tSC), ! }
	
	// Kill Extent of all classes
	do ##class(ikra.Dictionary.MarksUnit).%KillExtent()
	do ##class(ikra.Dictionary.MarksReview).%KillExtent()
	
	do ##class(ikra.Dictionary.Category).%KillExtent()
	do ##class(ikra.Dictionary.Fmarker).%KillExtent()
	do ##class(ikra.Dictionary.EMarker).%KillExtent()
	
	set tSC = ##class(ikra.util.main).DeleteDomain(domName)
	if (tSC '= $$$OK) { write "Can't delete domain :", domName, $System.Status.DisplayError(tSC), ! }
	write "ok", !
	return tSC
]]></Implementation>
</Method>
</Class>


<Class name="ikra.Phones.Processing.Dictionary">
<IncludeCode>%IKPublic</IncludeCode>
<TimeChanged>63930,59375.277465</TimeChanged>
<TimeCreated>63703,51280.174163</TimeCreated>

<Method name="TeachFMarkersDictionaryBD">
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	kill ^fmarkers
	
	set domainId = ##class(ikra.util.main).GetDomainId(domName)
	set i = 1
	
	&sql(declare cur1 cursor for 
   		select case when tb.nm = 0 then 'i#' else 't#' end || tb.fname
   		into :line
		from
		(select ctg.ctgname, 1 nm, fmr.fname
		from ikra_dictionary.category ctg
		join ikra_dictionary.fmarker fmr on ctg.id = fmr.ctgid
		union all
		select ctgname, 0, ctgname
		from ikra_dictionary.category) tb
		order by ctgname, nm, fname)
   &sql(open cur1)
   &sql(fetch cur1)
	
	while (SQLCODE = 0) {
		set stype = $piece(line,"#",1)
		if (stype = "i") { // "i" - Category
			set ^fmarkers(i) = line
			set i = i + 1
		}
		elseif (stype="t") { // "t" - term 
			set entityValue = $piece(line,"#",2)			
			set ^fmarkers(i) = "t#"_entityValue
			set i = i + 1
			kill similarResult				
			// Obtain similar entities IDs
			set status = ##class(%iKnow.Queries.EntityAPI).GetSimilar(.similarResult, domainId, entityValue, 1, 0, , ,$$$USEWORDS)
				
			if '($data(similarResult(1))) {
				&sql(fetch cur1)
				continue
			}
				
			set k1 = 1
			set p1 = ""
				
			// Loop through similar entities
			for {	
				set p1 = $order(similarResult(p1))	
				quit:(p1 = "")
				
				// Obtain ID of the similar entity
				set similarEntityId = $list(similarResult(k1),1)
					
				set similarEntity = ##class(%iKnow.Queries.EntityAPI).GetValue(domainId,similarEntityId)
					
				if (similarEntity '= entityValue) {
					set ^fmarkers(i) = "s#"_similarEntity
					set i = i + 1
				}
												
				set k1 = k1 + 1
			} // for (Similar)
				
		}	// elseif (stype="t") 
		
		set ^fmarkers(i) = "i#END"
		&sql(fetch cur1)
	}
	
	&sql(close cur1)
				
	return $$$OK
]]></Implementation>
</Method>

<Method name="TeachEMarkersDictionaryBD">
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill ^emarkers

	set domainId = ##class(ikra.util.main).GetDomainId(domName)
	set i = 1
	
	&sql(declare cur cursor for select case when EValue > 0 then '+' || EValue else '' || EValue end || '#' || EName into :line from ikra_dictionary.emarker order by EName)
   	&sql(open cur)
   	&sql(fetch cur)
	
	while (SQLCODE = 0) {
		set price = $piece(line,"#",1)
		set entityValue = $piece(line,"#",2)
		set ^emarkers(i) = price_"#"_entityValue
		
		set i = i + 1
		kill similarResult
							
		// Obtain similar entities IDs
		do ##class(%iKnow.Queries.EntityAPI).GetSimilar(.similarResult, domainId, entityValue, 1, 0, , ,$$$USEWORDS) // $$USENGRAMS $$$USEWORDS
			
		if '($data(similarResult(1))) { 
			&sql( fetch cur)
			continue 
		}
				
		set k1 = 1
		set p1 = ""
				
		// Loop through similar entities
		for {	
			set p1 = $order(similarResult(p1))	
			quit:(p1 = "")
			// Obtain ID of the similar entity
			set similarEntityId = $list(similarResult(k1),1)
			set similarEntity = ##class(%iKnow.Queries.EntityAPI).GetValue(domainId,similarEntityId)
			if (similarEntity '= entityValue) {
				set ^emarkers(i) = price_"#"_similarEntity
				set i = i + 1
			}					
			set k1 = k1 + 1
		} // for (Similar)
			
		&sql(fetch cur)	
	}
	
	&sql(close cur)
		
	return $$$OK
]]></Implementation>
</Method>

<Method name="TeachFMarkersDictionary">
<Description>
The method according to brief dictionary of functional markers forms complete dictionary, which includes similar concepts (s#)
domName - Domain name
writeToFile - filename to write a full list of similar terms. If writeToFile = "", it is not written. Example value: "fullFMarkersDict.txt"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,writeToFile:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	kill ^fmarkers
	
	set domainId = ##class(ikra.util.main).GetDomainId(domName)	

	// Open the file with the dictionary of functional markers.		
	set fileNameIn = ^ikraDomainFolder(domName)_"Fmarkers.txt"
	set streamIn  = ##class(%Stream.FileCharacter).%New()
	set tSC = streamIn.LinkToFile(fileNameIn)
	
	if (tSC '= $$$OK) {
		return tSC
	}
	
	write "   fmarkers input file... ", fileNameIn, !
	
	// creating output file	
	if (writeToFile '= "") {
		set fileNameOut = ^ikraDomainFolder(domName)_writeToFile
		set streamOut = ##class(%Stream.FileCharacter).%New()
		set tSC = streamOut.LinkToFile(fileNameOut)	
		
		if (tSC '= $$$OK) {
			return tSC
		}
		
		write "   fmarkers output file... ", fileNameOut,!
	}	
	
	set i = 1
			
	// Loop through lines of file	
	while '(streamIn.AtEnd) {
				
		set line = streamIn.ReadLine()
		
		if (writeToFile '= "") {
			do streamOut.WriteLine(line)
		}
		
		// Check, does a string begin with a "!" (! - comment)			
		set checkComment = $piece(line,"!",1,1)
		if (checkComment="") {
			set ^fmarkers(i) = line
			set i = i + 1
			continue
		}
		
		set stype = $piece(line,"#",1)
		
		if (stype = "d") {		// "d" - Dictionary
			set ^fmarkers(i) = line
			set i = i + 1
			continue
		}
		elseif (stype = "i") {	// "i" - Category
			set ^fmarkers(i) = line
			set i = i + 1
			continue
		}
		elseif (stype="t") {	// "t" - term 
	
			set dList = $piece(line,"#",2)
			set j = 1
			
			// Loop through terms in one line
			while ($piece(dList,",",j) '= "") {	
			
				// $piece(dList,",",j) - current term
				set entityValue = $piece(dList,",",j)
				
				set ^fmarkers(i) = "t#"_entityValue
				
				set i = i + 1
				
				kill similarResult				
				// Obtain similar entities IDs
				set status = ##class(%iKnow.Queries.EntityAPI).GetSimilar(.similarResult, domainId, entityValue, 1, 0, , ,$$$USEWORDS)
				
				if '($data(similarResult(1))) { 
					set j = j + 1
					continue 
				}
				
				set k1 = 1
				set p1 = ""
				
				// Loop through similar entities
				for {	
					set p1 = $order(similarResult(p1))	
					quit:(p1 = "")
					
					// Obtain ID of the similar entity
					set similarEntityId = $list(similarResult(k1),1)
					
					set similarEntity = ##class(%iKnow.Queries.EntityAPI).GetValue(domainId,similarEntityId)
					
					if (similarEntity '= entityValue) {
						set ^fmarkers(i) = "s#"_similarEntity
						if (writeToFile '= "")	{do streamOut.WriteLine("s#"_similarEntity)}
						set i = i + 1
					}

					set k2 = 1
					set p2 = ""
					
					if '($data(result(1))) { 
						set k1 = k1 + 1
						continue 
					}
										
					
					set k1 = k1 + 1
				} // for (Similar)
				
				set j = j + 1
			} // While (Line)
				
		}	// elseif (stype="t") 		
		
	} // while ('stream.AtEnd)
		
	write "   Dictionary placed in ^fmarkers [global].", !		
	if (writeToFile '= "")	
	{
		do streamOut.%Save()
		write "   extended dictionary is written to file: "_filenameOut,! 
	}		
	return $$$OK
]]></Implementation>
</Method>

<Method name="TeachEMarkersDictionary">
<Description>
The method according to brief dictionary of emotional markers forms complete dictionary, which includes similar concepts
domName - Domain name
writeToFile - filename to write a full list of similar terms. If writeToFile = "", it is not written. Example value: "fullEMarkersDict.txt"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,writeToFile:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	kill ^emarkers

	set domainId = ##class(ikra.util.main).GetDomainId(domName)	

	// Open the file with the dictionary of functional markers.		
	set fileNameIn = ^ikraDomainFolder(domName)_"Emarkers.txt"
	set streamIn  = ##class(%Stream.FileCharacter).%New()
	set tSC = streamIn.LinkToFile(fileNameIn)
	
	if (tSC '= $$$OK) {
		return tSC
	}
	
	write "   fmarkers input file... ", fileNameIn, !
	
	// creating output file	
	if (writeToFile '= "") {
		set fileNameOut = ^ikraDomainFolder(domName)_writeToFile
		set streamOut = ##class(%Stream.FileCharacter).%New()
		set tSC = streamOut.LinkToFile(fileNameOut)	
		
		if (tSC '= $$$OK) {
			return tSC
		}
		
		write "   fmarkers output file... ", fileNameOut,!
	}
	
	set i = 1
			
	// Loop through lines of file	
	while '(streamIn.AtEnd) {		
		set line = streamIn.ReadLine()
		
		if (writeToFile '= "") {
			do streamOut.WriteLine(line)
		}	
			
		// Check, does a string begin with a "!" (! - comment)	
		set checkComment = $piece(line,"!",1,1)
		if (checkComment="") {
			set ^emarkers(i) = line
			set i = i + 1
			continue
		}
		
		set price = $piece(line,"#",1)
		set dList = $piece(line,"#",2)
		set j = 1
			
		// Loop through terms in one line
		while ($piece(dList,",",j) '= "") {	
			
			// $piece(dList,",",j) - current term(entity)
			set entityValue = $piece(dList,",",j)
			//set j = j + 1

			set ^emarkers(i) = price_"#"_entityValue
			set i = i + 1
				
			kill similarResult
							
			// Obtain similar entities IDs
			do ##class(%iKnow.Queries.EntityAPI).GetSimilar(.similarResult, domainId, entityValue, 1, 0, , ,$$$USEWORDS) // $$USENGRAMS $$$USEWORDS
			
			if '($data(similarResult(1))) { 
				set j = j + 1
				continue 
			}
				
			set k1 = 1
			set p1 = ""
				
			// Loop through similar entities
			for {	
				set p1 = $order(similarResult(p1))	
				quit:(p1 = "")
				
				// Obtain ID of the similar entity
				set similarEntityId = $list(similarResult(k1),1)
				
				set similarEntity = ##class(%iKnow.Queries.EntityAPI).GetValue(domainId,similarEntityId)
				
				if (similarEntity '= entityValue) {
					set ^emarkers(i) = price_"#"_similarEntity
					if (writeToFile '= "")	{do streamOut.WriteLine(price_"#"_similarEntity)}
					set i = i + 1
				}

				set k2 = 1
				set p2 = ""
					
				if '($data(result(1))) { 
					set k1 = k1 + 1
					continue 
				}
										
					
				set k1 = k1 + 1
			} // for (Similar)
				
			set j = j + 1
		} // While (Line)
					
	} // while ('stream.AtEnd)

	write "   Dictionary placed in ^emarkers [global].", !
	if (writeToFile '= "") {	
		do streamOut.%Save()
		write "   extended dictionary is written to file: "_filenameOut,! 
	}
			
	return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ikra.Phones.Processing.Processing">
<IncludeCode>%IKPublic</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>64374,61986.001173</TimeChanged>
<TimeCreated>63703,51656.851126</TimeCreated>

<Method name="Start">
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	kill ^preferences
	
	set fileNameIn = ^ikraDomainFolder(domName)_"Prefs.txt"
	set streamIn  = ##class(%Stream.FileCharacter).%New()
	set tSC = streamIn.LinkToFile(fileNameIn)
	
	if (streamIn.%IsNull()) {
		write "There is no Preferences file. Will use the default settings.", !
		
		do streamIn.WriteLine("NEUTRALLOWBORDER = 2.75")	
		do streamIn.WriteLine("NEUTRALHIGHBORDER = 3.25")	
		do streamIn.WriteLine("PESSUSPECT = 0.99")	
		do streamIn.WriteLine("NFMARKERS = 1")	
		do streamIn.WriteLine("MAXSENTENCELENGTHTORETURN = 15")	
		do streamIn.WriteLine("CALCALGORITHM = SENTENCE")	
		do streamIn.WriteLine("NEGATION = EXCLUDE")
		do streamIn.WriteLine("GRADEMULTIPLIER = 10")
		do streamIn.WriteLine("GRADESUSPECTDIFF = 1")
		
		do streamIn.%Save()
	}
	
	return:(tSC '= $$$OK) tSC
	
	while '(streamIn.AtEnd) {
				
		set line = streamIn.ReadLine()
		
		if ($extract(line, 1, 1) = "#") { continue }
		elseif (($extract(line, 1, 1) '= "") && ($extract(line, 1, 1) '= " ")) {
			set line = $translate(line, " ", "")
		
			set parameter = $piece(line, "=", 1)
			set value = $piece(line, "=", 2)
		
			set ^preferences(parameter) = value
		}
	}
	
	if '($data(^preferences("CALCALGORITHM"))) {
		write "There is no CALCALGORITHM parameter. Use default settings: sentence.", !
		set ^preferences("CALCALGORITHM") = "sentence"	
	}
	else {
		if (($ZCONVERT(^preferences("CALCALGORITHM"),"L") '= "sentence") && ($ZCONVERT(^preferences("CALCALGORITHM"),"L") '= "path")) {
			write "CALCALGORITHM has not valid value. Use default settings: sentence.", !
			set ^preferences("CALCALGORITHM") = "sentence"
		}     
	}
	
	if '($data(^preferences("NEUTRALLOWBORDER"))) {
		write "There is no NEUTRALLOWBORDER parameter. Use default settings: 2.75.", !
		set ^preferences("NEUTRALLOWBORDER") = 2.75	
	}
	else {
		if ($ISVALIDNUM(^preferences("NEUTRALLOWBORDER"))) {
			write "NEUTRALLOWBORDER is not valid number. Use default settings: 2.75.", !
			set ^preferences("NEUTRALLOWBORDER") = 2.75
		}
	}
	
	if '($data(^preferences("NFMARKERS"))) {
		write "There is no NFMARKERS parameter. Use default settings: 1.", !
		set ^preferences("NFMARKERS") = 1	
	}
	else {
		if ($ISVALIDNUM(^preferences("NFMARKERS"))) {
			write "NFMARKERS is not valid number. Use default settings: 1.", !
			set ^preferences("NFMARKERS") = 1
		}
	}
	
	if '($data(^preferences("PESSUSPECT"))) {
		write "There is no PESSUSPECT parameter. Use default settings: 0.99.", !
		set ^preferences("PESSUSPECT") = 0.99
	}
	else {
		if ($ISVALIDNUM(^preferences("PESSUSPECT"))) {
			write "PESSUSPECT is not valid number. Use default settings: 0.99.", !
			set ^preferences("PESSUSPECT") = 0.99
		}
	}
	
	if '($data(^preferences("NEUTRALHIGHBORDER"))) {
		write "There is no NEUTRALHIGHBORDER parameter. Use default settings: 3.25.", !
		set ^preferences("NEUTRALHIGHBORDER") = 3.25	
	}
	else {
		if '($ISVALIDNUM(^preferences("NEUTRALHIGHBORDER"))) {
			write "NEUTRALHIGHBORDER is not valid number. Use default settings: 3.25.", !
			set ^preferences("NEUTRALHIGHBORDER") = 3.25	
		}     
	}
	
	if '($data(^preferences("MAXSENTENCELENGTHTORETURN"))) {
		write "There is no MAXSENTENCELENGTHTORETURN parameter. Use default settings: 15.", !
		set ^preferences("MAXSENTENCELENGTHTORETURN") = 15
	}
	else {
		if '($ISVALIDNUM(^preferences("MAXSENTENCELENGTHTORETURN"))) {
			write "MAXSENTENCELENGTHTORETURN is not valid number. Use default settings: 15.", !
			set ^preferences("MAXSENTENCELENGTHTORETURN") = 15	
		}     
	}
	
	if '($data(^preferences("GRADEMULTIPLIER"))) {
		write "There is no GRADEMULTIPLIER parameter. Use default settings: 5.", !
		set ^preferences("GRADEMULTIPLIER") = 10	
	}
	else {
		if '($ISVALIDNUM(^preferences("GRADEMULTIPLIER"))) {
			write "GRADEMULTIPLIER is not valid number. Use default settings: 5.", !
			set ^preferences("GRADEMULTIPLIER") = 10
		}     
	}	
	
	if '($data(^preferences("GRADESUSPECTDIFF"))) {
		write "There is no GRADESUSPECTDIFF parameter. Use default settings: 1.", !
		set ^preferences("GRADESUSPECTDIFF") = 1	
	}
	else {
		if '($ISVALIDNUM(^preferences("GRADESUSPECTDIFF"))) {
			write "GRADESUSPECTDIFF is not valid number. Use default settings: 1.", !
			set ^preferences("GRADESUSPECTDIFF") = 1
		}     
	}		
	
	if '($data(^preferences("NEGATION"))) {
		write "There is no NEGATION parameter. Use default settings: exclude.", !
		set ^preferences("NEGATION") = "exclude"
	}	
	else {
		if (($ZCONVERT(^preferences("NEGATION"),"L") '= "exclude") && ($ZCONVERT(^preferences("NEGATION"),"L") '= "exclude")) {
			write "NEGATION has not valid value. Use default settings: exclude.", !
			set ^preferences("NEGATION") = "exclude"
		}     
	}

	
	if ($data(^preferences("CALCALGORITHM"))) {
		if ($ZCONVERT(^preferences("CALCALGORITHM"),"L") = "path") {
			if ($data(^preferences("NEGATION"))) {
				if ($ZCONVERT(^preferences("NEGATION"),"L") = "exclude") {
					set tSC = ##class(ikra.Phones.Processing.Processing).ProcessAllSourcesPaths(domName, "exclude")
				}
				else {
					set tSC = ##class(ikra.Phones.Processing.Processing).ProcessAllSourcesPaths(domName, "ignore")
				}
			}
				else {
					write "Settings data corruption.", !
					return ERROR("Settings data corruption. NEGATION Parameter is missing. Reload the domain or fix the settings data.")	
				}
		}
		else {
			if ($data(^preferences("NEGATION"))) {
				if ($ZCONVERT(^preferences("NEGATION"),"L") = "ignore") {
					set tSC = ##class(ikra.Phones.Processing.Processing).ProcessAllSources(domName, "ignore")
				}
				else {
					set tSC = ##class(ikra.Phones.Processing.Processing).ProcessAllSources(domName, "inverse") //exclude
				}
			}
				else {
					write "Settings data corruption.", !
					return ERROR("Settings data corruption. NEGATION Parameter is missing. Reload the domain or fix the settings data.")	
				}
		}
	}
	else {
		write "Settings data corruption.", !
		return ERROR("Settings data corruption. CALCALGORITHM Parameter is missing. Reload the domain or fix the settings data.")	
	}
	
	return tSC
]]></Implementation>
</Method>

<Method name="ProcessAllSources">
<Description>
Method of processing all domain sources. Processing dictionaries, emarkers, fmarkers, total evaluation of phones, user sentences and etc.
domName - Domain name, negation: exclude - Exclude sentences with negation from processing, ignore - ignore negation.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,negation:%String="ignore"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set beginTime = $piece($horolog,",",2)
	write !, "Started at: ", $ztime(beginTime), !
	
	set domainId = ##class(ikra.util.main).GetDomainId(domName)	
	
	// Processing the dictionaries
	set tSC = ##class(ikra.Phones.Processing.Dictionary).TeachEMarkersDictionaryBD(domName)
	
	if (tSC '= $$$OK) {
		do $System.Status.GetErrorText(tSC)
		w !
		return $$$ERROR("Can't process emarkers dictionary")
	}
	
	set tSC = ##class(ikra.Phones.Processing.Dictionary).TeachFMarkersDictionaryBD(domName)
	
	if (tSC '= $$$OK) {
		do $System.Status.GetErrorText(tSC)
		w !
		return $$$ERROR("Can't process fmarkers dictionary")
	}
	
	/*write "   Clearing old stats.."
	set tSC = ..ClearStats()*/
	
	/*if (tSC '= $$$OK) {
		do $System.Status.GetErrorText(tSC)
		w !
	}
	else {
		write "  Done.", !
	}*/
	
	write "   Clearing old sentences.."
	set tSC = ..ClearSentences()
	
	if (tSC '= $$$OK) {
		do $System.Status.GetErrorText(tSC)
		w !
	}
	else {
		write "  Done.", !
	}
	
	write "   Processing Emotional markers.." 
	
	// Fill the Sentence table with counts of emotional markers
	set tSC = ..BuildProcessingSentences(domName)
	
	if (tSC '= $$$OK) {
		do $System.Status.GetErrorText(tSC)
		w !
	}
	else {
		write "  Done.", !
	}

	// Processing Negation
	write "   Processing Negation.."
	do ..ProcessNegationSentences(domName)
	write "  Done.", !
	
	/*
	set nFMarkers = ^preferences("NFMARKERS")
	do ..PreProcessFunctionalMarkers(domName, nFMarkers)
	*/
	
	kill ^review
	
	write "   Processing Functional markers.."
	set tSC = ..ProcessFunctionalMarkers(domName, negation)
	
	write:(tSC = $$$OK) "  Done.", !
	
	write "   Processing phones grades.."
	set tSC = ..ProcessPhonesGrades()
	
	if (tSC '= $$$OK) {
		do $System.Status.GetErrorText(tSC)
		w !
	}	
	else {
		write "  Done.", !
	}
	
	set maxLength = ^preferences("MAXSENTENCELENGTHTORETURN")
	
	set endTime = $piece($horolog,",",2)

	write !, "Elapsed time: ", $ztime(endTime - beginTime), !
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="BuildProcessingSentences">
<Description>
The method analyzes the sentences of the sources on the emotional markers and fill the ikra_Phones_Processing.Sentence table.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set domainId = ##class(ikra.util.main).GetDomainId(domName)	
	
	set p1 = ""	
		
	for {	
		
		set p1 = $order(^emarkers(p1))
		quit:(p1 = "")	
	
		set line = ^emarkers(p1)
		
		// Check, does a string begin with a "!" (! - comment)		
		set checkComment = $PIECE(line,"!", 1, 1)
		if (checkComment = "") { continue }
		
		// Obtain a term(entity) value.
		set sValue = $piece(line,"#", 1)	
		set entityValue = $piece(line,"#", 2)
		
		// Obtain the ID of current entity
		set entityId = ##class(%iKnow.Queries.EntityAPI).GetId(domainId, entityValue)	
	
		kill result	
		// Obtain a list of sentences in the sources containing this entity
		do ##class(%iKnow.Queries.SentenceAPI).GetByEntityIds(.result, domainId, $lb(entityId),, 1, 0)	
		
		if '($data(result(1))) { continue }			
		
		set p2 = ""
		
		// Loop on the sentences contained this entity
		for {		
					
			set p2 = $order(result(p2))	
			quit:(p2 = "")
			
			// Obtain the Sentence ID		
			set sentenceId = $list(result(p2), 3)	
			
			set sourceId = ##class(%iKnow.Queries.SentenceAPI).GetSourceId(domainId, sentenceId)
			
			// Obtain Sentence ID in the table
			&sql(SELECT ID INTO :id FROM  ikra_Phones_Processing.Sentence WHERE SentenceId = :sentenceId AND DomainName = :domName)
			
			// If the query does not return anything, then add a new record
			if (SQLCODE = 100) {	
				&sql(INSERT INTO ikra_Phones_Processing.Sentence (DomainName, SentenceId, SrcId) 
					 VALUES (:domName, :sentenceId, :sourceId))
				set id = ^ikra.Phones.PrC684.SentenceD
			}
			elseif (SQLCODE < 0) {
				write "Error during SQL query.", !
				write "   query returned SQLCODE: ", SQLCODE, !
				return $$$ERROR("SQL query error")	
			}
			
			// Adding value in the appropriate field. (Positive or Negative) 					
			if (sValue = "+1")		{set $list(^ikra.Phones.PrC684.SentenceD(id),4) = $list(^ikra.Phones.PrC684.SentenceD(id),4) + 1 }
			elseif (sValue = "-1")	{set $list(^ikra.Phones.PrC684.SentenceD(id),5) = $list(^ikra.Phones.PrC684.SentenceD(id),5) + 1 }
							
		}	// for (Sentence)
		
	} // while 'stream.AtEnd
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="ProcessNegationSentences">
<Description>
Method of processing negative sentences.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set ^shortNegSent = 0
	
	set domainId = ##class(ikra.util.main).GetDomainId(domName)	
	
	set length = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(domainId)
	
	for i=1:1:length {
		
		set srcId = i
		
		// Get the list of attribute values of sentences.
		do ##class(%iKnow.Queries.SourceAPI).GetAttributes(.att, domainId, srcId, 1, 0, "", $$$IKATTLVLSENT)
	    
	    set j = 1
	    
	    // Loop through the list of attribute values ​​to determine the Negation.
	    while $data(att(j)) {
	    	if ($listget(att(j), 1) = 1) {
	        			
				set sentenceId = $listget(att(j),4)
				
				// Obtain Sentence ID in the table
				&sql(SELECT ID INTO :id FROM  ikra_Phones_Processing.Sentence WHERE SentenceId = :sentenceId AND DomainName = :domName)
				
				// Switch the Positive and Negative values.
	           	if (SQLCODE = 0) {
	            	set temp = $list(^ikra.Phones.PrC684.SentenceD(id), 4)
	            	set $list(^ikra.Phones.PrC684.SentenceD(id),4) = $list(^ikra.Phones.PrC684.SentenceD(id),5)
	            	set $list(^ikra.Phones.PrC684.SentenceD(id),5) = temp
	            	set $list(^ikra.Phones.PrC684.SentenceD(id),6) = -1
	           	}
	        }
	        
	    	set j = j + 1
	    	
	    } // while
	}    
	return $$$OK
]]></Implementation>
</Method>

<Method name="ProcessFunctionalMarkers">
<Description>
The method analyzes the sentences of the sources on the functional markers and fills fields iKnowRating* in the ikra_Phones_Stat.Review table.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,negation:%String="ignore"</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set domainId = ##class(ikra.util.main).GetDomainId(domName)	
	
	set length = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(domainId)
	
	if ($data(^preferences("GRADEMULTIPLIER"))) {
		if ($ISVALIDNUM(^preferences("GRADEMULTIPLIER"))) {
			set gradeMultiplier = ^preferences("GRADEMULTIPLIER")
		}
		else {
			write "GRADEMULTIPLIER is not valid number. Use default settings", !
			set gradeMultiplier = ^preferences("GRADEMULTIPLIER")
		}
	}	 
	else {
		write "Settings data corruption.", !
		return ERROR("Settings data corruption. NEGATION Parameter is missing. Reload the domain or fix the settings data.")	
	}		
			
	// The functional marker's category.
	set markerCategory = ""
	
	for i=1:1:length {
		
		set srcId = i
		
		// Positive and negative values ​​within the category.
		set ^review(srcId,"positive")  = 0
		set ^review(srcId,"negative")  = 0
		
		set ^review(srcId,"positiveMarkersSum") = 0
		set ^review(srcId,"negativeMarkersSum") = 0
		
		// Appraisal within the category.
		set ^review(srcId,"grade") = 0
		
		// Counter of evaluated categories.
		set ^review(srcId,"gradedCategoryCount") = 0
		
		// General grade.
		set ^review(srcId,"totalGrade") = 0
		
		// Positive and negative values ​​in the entire review.
		set ^review(srcId,"totalNegative") = 0
		set ^review(srcId,"totalPositive") = 0
	}
	
	set p1 = ""
		
	for	{	
	
		set p1 = $order(^fmarkers(p1))
		quit:(p1 = "")
		
		set line = ^fmarkers(p1)
				
		// Check, does a string begin with a "!" (! - comment)			
		set checkComment = $piece(line,"!",1,1)
		if (checkComment="") { continue }

		set stype = $piece(line,"#",1)
		
		if (stype = "d") { continue }
		// Processing the string with the name of the category
		elseif (stype = "i") {
			
			for i=1:1:length {
				set srcId = i
				kill ^review(srcId, "grade")
			}
			
			// If we have a category (the first pass it does not exist), estimate the grade for this category.
			if (markerCategory '= "") {		
				
				for i=1:1:length {
					
					set srcId = i
					
					if ((^review(srcId,"negative") = 0) && (^review(srcId,"positive") = 0)) { 
						kill ^review(srcId, "grade")	
					}
					elseif (^review(srcId,"negative") = 0) {
						set ^review(srcId,"grade") = 1 
					}
					elseif (^review(srcId,"positive") = 0) {
						set ^review(srcId,"grade") = 0.2 
					}
					else {	
						set ^review(srcId,"grade") = ^review(srcId,"positive") / (^review(srcId,"positive") + ^review(srcId,"negative"))
					}
							
					if $data(^review(srcId,"grade")) {	
					
						// Converting grade in the form of 1 to 5
						set ^review(srcId,"grade") = ^review(srcId,"grade") * gradeMultiplier
						
						set ^review(srcId,markerCategory) = ^review(srcId,"grade")
						set ^review(srcId,"gradedCategoryCount") = ^review(srcId,"gradedCategoryCount") + 1
						set ^review(srcId,"totalGrade") = ^review(srcId,"totalGrade") + ^review(srcId,"grade")
						
						set ^review(srcId,"positiveMarkersSum") = ^review(srcId,"positiveMarkersSum") + ^review(srcId,"positive")
						set ^review(srcId,"negativeMarkersSum") = ^review(srcId,"negativeMarkersSum") + ^review(srcId,"negative")
						
					}
					else {
						set ^review(srcId, markerCategory) = "" 
					}
					
					// Reset positive and negative (for the next category)
					set ^review(srcId,"positive") = 0
					set ^review(srcId,"negative") = 0
				}
			}
			
			// Obtain the name of the next category
			set markerCategory = $piece(line,"#",2)
		}
		
		// Processing the string with the term(entity)
		elseif ((stype="t") || (stype="s")) {
			
			// $piece(line,"#",2) - current term(entity)
			set entityValue = $piece(line,"#",2)
			set entityId = ##class(%iKnow.Queries.EntityAPI).GetId(domainId, entityValue)	

			kill result
			
			// Obtain a list of sentences in the sources containing this entity					
			set st = ##class(%iKnow.Queries.SentenceAPI).GetByEntityIds(.result, domainId, $lb(entityId),, 1, 0)			
			
			set p2 = ""
			
			if '($data(result(1))) { continue }
			
			// Loop through the sentences contained this entity
			for {		
						
				set p2 = $order(result(p2))	
				quit:(p2 = "")
				
				// Obtain the Sentence ID	
				set sentenceId = $list(result(p2), 3)	
				
				// Obtain the sentence values from table
				&sql(SELECT Negation, Negative, Positive, SrcId 
					 INTO :Negation, :sNegative, :sPositive, :srcId 
					 FROM  ikra_Phones_Processing.Sentence 
					 WHERE SentenceId = :sentenceId AND DomainName = :domName)
				
				// If the query does not return anything go to next sentence
				if (SQLCODE = 100) { continue }
				
				// Skipping sentences with the negation, if specified the negation parameter
				if ((negation = "exclude") && (Negation = -1)) { continue } 
				elseif ((negation = "ignore") && (Negation = -1)) {
					&sql(UPDATE ikra_Phones_Processing.Sentence (Negation, Negative, Positive)
					 	 VALUES(1, :sPositive, :sNegative)
					 	 WHERE SentenceId = :sentenceId)
					set temp = sPositive 
					set sPositive = sNegative
					set sNegative = temp
				}
						
				// Accumulate the values in the appropriate category
				set ^review(srcId,"positive") = ^review(srcId,"positive") + sPositive
				set ^review(srcId,"negative") = ^review(srcId,"negative") + sNegative
				set ^review(srcId,"totalNegative") = ^review(srcId,"totalNegative") + sNegative
				set ^review(srcId,"totalPositive") = ^review(srcId,"totalPositive") + sPositive
								
			}	// for (Sentence)

		}	// elseif (stype="t") 		
		
	} // while ('stream.AtEnd)
	
	for i=1:1:length {
	
		set srcId = i
		
		// If we have at least one estimated category, estimate the general grade
		if (^review(srcId,"gradedCategoryCount") > 0) {
			set ^review(srcId,"iKnowRating") = ^review(srcId,"totalGrade") / ^review(srcId,"gradedCategoryCount")
			
			// Present Emarkers grade in the form of 1 to 5.
			set ^review(srcId,"iKnowEmarkersRating") = $SYSTEM.SQL.CEILING($normalize((^review(srcId,"totalPositive") / (^review(srcId,"totalPositive") + ^review(srcId,"totalNegative"))) * gradeMultiplier - 0.1, -1) + 1)
		}
				
		//&sql(SELECT phoneId INTO :phoneId FROM ikra_Phones_Stat.Review WHERE SourceId = :srcId)
		&sql(SELECT MIN(UID) INTO :phoneId FROM ikra_Dictionary.MarksReview WHERE RID = :srcId)
		
		set phoneName = ##class(%iKnow.Queries.MetadataAPI).GetValue(domainId, "UnitName", ##class(%iKnow.Queries.SourceAPI).GetExternalId(domainId, srcId), .stn)
		
		set numberOfEntities = ##class(%iKnow.Queries.EntityAPI).GetCountBySource(domainId, srcId)
		if (numberOfEntities = 0) { set numberOfEntities = 1 }
		
		set positiveMarkersSum = ^review(srcId,"positiveMarkersSum")
		set negativeMarkersSum = ^review(srcId,"negativeMarkersSum")
		
		set emotionalSum = positiveMarkersSum + negativeMarkersSum
		set numberOfSentences = ##class(%iKnow.Queries.SentenceAPI).GetCountBySource(domainId, srcId)
		             
		&sql(declare curCtg cursor for select id, ctgName into :ccID, :ccName from ikra_dictionary.category)
   		&sql(open curCtg)
   		&sql(fetch curCtg)
   		
   		&sql(SELECT DISTINCT UID INTO :oID FROM ikra_Dictionary.MarksReview WHERE RID = :srcId)
	
		while (SQLCODE = 0) {
			set domID = ##class(ikra.util.main).GetDomainId(domName)
			write srcId_" "_ccName, !
			set catVal = ^review(srcId, ccName)
			&sql(INSERT OR UPDATE INTO ikra_Dictionary.MarksReview(DomainID, UID, RID, CtgID, Mark)	
			VALUES (:domID, :oID, :srcId, :ccID, :catVal))
			&sql(fetch curCtg)
		}
	
		&sql(close curCtg)
}

	
	return $$$OK
]]></Implementation>
</Method>

<Method name="ProcessPhonesGrades">
<Description>
The method of calculating the final evaluation of phone.</Description>
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill unitIdList
	
	// Obtain a list of all objects	 
	&sql(DECLARE UntList Cursor FOR
		 SELECT DISTINCT UID INTO :tempUnitId FROM ikra_Dictionary.MarksReview ORDER BY UID)
	
	&sql(open UntList)
	&sql(fetch UntList)
	
	while (SQLCODE = 0) {
		set $list(unitIdList,*+1) = tempUnitId
		&sql(fetch UntList)	
	}
	
	&sql(close UntList)
	
	set untLength = $listlength(unitIdList)

	// Loop through all phones
	for i=1:1:untLength
	{			
		set unitId = $list(unitIdList, i)
		
		// Obtain the final evaluation of phone
		&sql(SELECT DISTINCT DomainID
        	 INTO :domID
		     FROM ikra_Dictionary.MarksReview)
		
		&sql(SELECT MIN(RID) INTO :srcId FROM ikra_Dictionary.MarksReview WHERE UID = :unitId)     
		set unitName = ##class(%iKnow.Queries.MetadataAPI).GetValue(domID, "UnitName", ##class(%iKnow.Queries.SourceAPI).GetExternalId(domID, srcId), .stn)
		
		&sql(declare curCtg1 cursor for select id, ctgName into :ccID, :ccName from ikra_dictionary.category)
   		&sql(open curCtg1)
   		&sql(fetch curCtg1)
	
		while (SQLCODE = 0) {
			&sql(SELECT AVG(NULLIF(Mark, 0))
        	 INTO :avgUnt
		     FROM ikra_Dictionary.MarksReview
		     WHERE UID = :unitId & CtgID = :ccID)
		     
		    &sql(INSERT OR UPDATE INTO ikra_Dictionary.MarksUnit 
			 (DomainID, UID, UName, CtgID, Mark)
			 VALUES (:domID, :unitId, :unitName, :ccID, :avgUnt))
			&sql(fetch curCtg1)
		}
	
		&sql(close curCtg1)
	}
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="ClearSentences">
<Description>
Method of clearing the Sentence table.</Description>
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		
	set tSC = ##class(ikra.Phones.Processing.Sentence).%KillExtent()
	
	return tSC
]]></Implementation>
</Method>
</Class>


<Class name="ikra.Phones.Processing.Sentence">
<Super>%Persistent</Super>
<TimeChanged>63703,50855.75955</TimeChanged>
<TimeCreated>63703,50855.590397</TimeCreated>

<Property name="SentenceId">
<Description>
Sentence ID</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Index name="SentenceIdIndex">
<Properties>SentenceId</Properties>
<Unique>1</Unique>
</Index>

<Property name="DomainName">
<Description>
Domain name</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Positive">
<Description>
Number of positive markers.</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Negative">
<Description>
Number of negative markers.</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Negation">
<Description>
The Negation flag.</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="nFmarkers">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="nWords">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="SrcId">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Phones.PrC684.SentenceD</DataLocation>
<DefaultData>SentenceDefaultData</DefaultData>
<IdLocation>^ikra.Phones.PrC684.SentenceD</IdLocation>
<IndexLocation>^ikra.Phones.PrC684.SentenceI</IndexLocation>
<StreamLocation>^ikra.Phones.PrC684.SentenceS</StreamLocation>
<Data name="SentenceDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SentenceId</Value>
</Value>
<Value name="3">
<Value>DomainName</Value>
</Value>
<Value name="4">
<Value>Positive</Value>
</Value>
<Value name="5">
<Value>Negative</Value>
</Value>
<Value name="6">
<Value>Negation</Value>
</Value>
<Value name="7">
<Value>nFmarkers</Value>
</Value>
<Value name="8">
<Value>nWords</Value>
</Value>
<Value name="9">
<Value>SrcId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Phones.Stat.Phone">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63708,42212.51254</TimeChanged>
<TimeCreated>63703,49903.949929</TimeCreated>

<Property name="PhoneId">
<Description>
Phone ID.</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Index name="PhoneIdIndex">
<Properties>PhoneId</Properties>
<Unique>1</Unique>
</Index>

<Property name="PhoneName">
<Description>
Phone Name.</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="PhoneNameIndex">
<Properties>PhoneName</Properties>
</Index>

<Property name="UserRating">
<Description>
Author's rating of phone.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowRating">
<Description>
Estimated rating of phone.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowEmarkersRating">
<Description>
Estimated rating of hotel without excluding functional markers.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowRatingComfort">
<Description>
Estimated rating of comfort.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowRatingPerfomance">
<Description>
Estimated rating of location.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowRatingLink">
<Description>
Estimated rating of service.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowRatingCamera">
<Description>
Estimated rating of food.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="ReviewsCount">
<Description>
Number of reviews.</Description>
<Type>%Integer</Type>
</Property>

<Property name="NegativeReviewsPCT">
<Description>
Negative reviews percent.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="PositiveReviewsPCT">
<Description>
Positive reviews percent.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="NeutralReviewsPCT">
<Description>
Neutral reviews percent.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="SentComfort">
<Description>
A list of sentences from the reviews characterizing comfort of the phone.</Description>
<Type>%List</Type>
</Property>

<Property name="SentPerfomance">
<Description>
A list of sentences from the reviews characterizing perfomance of the phone.</Description>
<Type>%List</Type>
</Property>

<Property name="SentLink">
<Description>
A list of sentences from the reviews characterizing link of the hotel.</Description>
<Type>%List</Type>
</Property>

<Property name="SentCamera">
<Description>
A list of sentences from the reviews characterizing camera of the hotel.</Description>
<Type>%List</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
/*ClassMethod GetFinalText(phoneId As %Integer) As %String
{
	set reviewCount = 0
	set iKnowRatingPositive = 0
	set iKnowRatingComfortPositive = 0
	set iKnowRatingFoodPositive = 0
	set iKnowRatingHospitalityPositive = 0
	set iKnowRatingLocationPositive = 0
	set iKnowRatingServicePositive = 0
	set iKnowRatingTerritoryPositive = 0
	set iKnowRatingNegative = 0
	set iKnowRatingComfortNegative = 0
	set iKnowRatingFoodNegative = 0
	set iKnowRatingHospitalityNegative = 0
	set iKnowRatingLocationNegative = 0
	set iKnowRatingServiceNegative = 0
	set iKnowRatingTerritoryNegative = 0
	set comfortText = ""
	set hospitalityText = ""
	set foodText = ""
	set serviceText = ""
	set extraText = ""
	
	// Obtain the cursor
	&sql(DECLARE crsr CURSOR FOR
	     SELECT id, iKnowRating, iKnowEmarkersRating, iKnowRatingComfort, iKnowRatingFood,
	            iKnowRatingHospitality, iKnowRatingLocation, iKnowRatingService, iKnowRatingTerritory 
	     INTO :id, :iKnowRating, :iKnowEmarkersRating, :iKnowRatingComfort, :iKnowRatingFood,
	     	  :iKnowRatingHospitality, :iKnowRatingLocation, :iKnowRatingService, :iKnowRatingTerritory
	     FROM ikra_Hotels_Stat.Review
	     WHERE HotelId = :hotelId
	)	
	
	// Open cursor
	&sql(open crsr)
	&sql(fetch crsr)
	
	// Loop through cursor.
	while (SQLCODE '= 100)
	{
		set reviewCount = reviewCount + 1
		
		if (iKnowRating > 3) { set iKnowRatingPositive = iKnowRatingPositive + 1}
		elseif (iKnowRating '= "") { set iKnowRatingNegative = iKnowRatingNegative + 1 }
		
		if (iKnowRatingComfort > 3) { set iKnowRatingComfortPositive = iKnowRatingComfortPositive + 1}
		elseif (iKnowRatingComfort '= "") { set iKnowRatingComfortNegative = iKnowRatingComfortNegative + 1}
		
		if (iKnowRatingFood > 3) { set iKnowRatingFoodPositive = iKnowRatingFoodPositive + 1 }
		elseif (iKnowRatingFood '= "") { set iKnowRatingFoodNegative = iKnowRatingFoodNegative + 1 }
		
		if (iKnowRatingHospitality > 3) { set iKnowRatingHospitalityPositive = iKnowRatingHospitalityPositive + 1 }
		elseif (iKnowRatingHospitality '= "") { set iKnowRatingHospitalityNegative = iKnowRatingHospitalityNegative + 1 }
		
		if (iKnowRatingLocation > 3) { set iKnowRatingLocationPositive = iKnowRatingLocationPositive + 1 }
		elseif (iKnowRatingLocation '= "") { set iKnowRatingLocationNegative = iKnowRatingLocationNegative + 1 }
		
		if (iKnowRatingService > 3) { set iKnowRatingServicePositive = iKnowRatingServicePositive + 1 }
		elseif (iKnowRatingService '= "") { set iKnowRatingServiceNegative = iKnowRatingServiceNegative + 1}
		
		if (iKnowRatingTerritory > 3) { set iKnowRatingTerritoryPositive = iKnowRatingTerritoryPositive + 1 }
		elseif (iKnowRatingTerritory '= "") { set iKnowRatingTerritoryNegative = iKnowRatingTerritoryNegative + 1 }
		
		&sql(fetch crsr)
	}
		
	&sql(close crsr)
	
	if (reviewCount = 0) { 
		return "Нет отзывов по данному отелю."
	}
	
	// Obtain Hotel name.
	&sql(SELECT HotelName INTO :hotelName FROM ikra_Hotels_Stat.Hotel WHERE HotelId = :hotelId)
	
	// Получаем обращение, в зависимости от числа
	set lastChar = $extract(reviewCount,*-0)
	set word = $case(lastChar, "1":"человека", :"человек")
	
	set finalText = "Из "_reviewCount_" "_word_", отдыхавших в отеле "_hotelName_", " 
	
	set var = $random(6) + 1
	
	if (iKnowRatingPositive > iKnowRatingNegative) 
	{
		set hotelText = $case(var,
							  1:"довольны отелем остались ",
							  2:"отель в целом понравился ",
							  3:"отель пришелся по душе ",
							  4:"отель оценили положительно ",
							  5:"посчитали отель хорошим ",
							  6:"остались довольны отелем ")
		
		set hotelText = hotelText_" - "_iKnowRatingPositive_" ("_$NORMALIZE((iKnowRatingPositive / reviewCount * 100), 0)_"%)"					  
							  
	}
	else 
	{
		set hotelText = $case(var,
							  1:"недовольны отелем остались ",
							  2:"отель в целом не понравился ",
							  3:"отель оставил негативное впечатление у ",
							  4:"отель оценили отрицательно ",
							  5:"посчитали отель неудовлетворительным ",
							  6:"остались недовольны отелем ")
							  
		set hotelText = hotelText_" - "_iKnowRatingNegative_" ("_$NORMALIZE((iKnowRatingNegative / reviewCount * 100), 0)_"%)"								  
	}
	
	set finalText = finalText_hotelText_", "	
	
	set var = $random(6) + 1
	
	if (((iKnowRatingComfortPositive + iKnowRatingComfortNegative)/ reviewCount) > 0)
	{
	
		if (iKnowRatingComfortPositive > iKnowRatingComfortNegative) 
		{
			set comfortText = $case(var,
								  1:"условия посчитали комфортными ",
								  2:"понравились условия ",
								  3:"в отеле чувствовали себя комфортно ",
								  4:"комфортабельность оценили положительно ",
								  5:"остались довольны условиями ",
								  6:"посчитали условия комфортными ")
			
			set comfortText = comfortText_"- "_iKnowRatingComfortPositive_" ("_$NORMALIZE((iKnowRatingComfortPositive / (iKnowRatingComfortPositive + iKnowRatingComfortNegative) * 100), 0)_"%*), "					  
								  
		}
		else 
		{
			set comfortText = $case(var,
								  1:"не понравились условия ",
								  2:"условия посчитали некомфортными ",
								  3:"в отеле чувствували себя некомфортно ",
								  4:"комфортабельность оценили отрицательно ",
								  5:"остались недовольны условиями ",
								  6:"посчитали условия некомфортными ")
								  
			set comfortText = comfortText_"- "_iKnowRatingComfortNegative_" ("_$NORMALIZE((iKnowRatingComfortNegative / (iKnowRatingComfortPositive + iKnowRatingComfortNegative) * 100), 0)_"%*), "								  
		}	
	}
	
	set var = $random(6) + 1
	
	if (((iKnowRatingFoodPositive + iKnowRatingFoodNegative)/ reviewCount) > 0)
	{
		if (iKnowRatingFoodPositive > iKnowRatingFoodNegative) 
		{
			set foodText = $case(var,
								  1:"понравилась еда и питание",
								  2:"понравилась еда в ресторанах",
								  3:"положительно оценили качество пищи",
								  4:"остались довольны качеством еды",
								  5:"понравилось питание",
								  6:"высоко оценили качество пищи")
			
			set foodText = iKnowRatingFoodPositive_" ("_$NORMALIZE((iKnowRatingFoodPositive / (iKnowRatingFoodPositive + iKnowRatingFoodNegative) * 100), 0)_"%*) "_foodText_", "					  
								  
		}
		else 
		{
			set foodText = $case(var,
								  1:"не понравилась еда и питание",
								  2:"не понравилась еда в ресторанах",
								  3:"отрицательно оценили качество пищи",
								  4:"остались недовольны качеством еды",
								  5:"не понравилось питание",
								  6:"низко оценили качество пищи")
								  
			set foodText = iKnowRatingFoodNegative_" ("_$NORMALIZE((iKnowRatingFoodNegative / (iKnowRatingFoodPositive + iKnowRatingFoodNegative) * 100), 0)_"%*) "_foodText_", "								  
		}	
	}
	
	set var = $random(6) + 1
	
	if (((iKnowRatingHospitalityPositive + iKnowRatingHospitalityNegative)/ reviewCount) > 0)
	{
		if (iKnowRatingHospitalityPositive > iKnowRatingHospitalityNegative) 
		{
			set hospitalityText = $case(var,
								  1:"отметили вежливость и приветливость персонала",
								  2:"понравилось отношение персонала",
								  3:"отметили гостеприимность персонала отеля",
								  4:"остались довольны работой персонала",
								  5:"высоко оценили уровень работы перонала",
								  6:"понравилось отношение персонала отеля")
			
			set hospitalityText = hospitalityText_" - "_iKnowRatingHospitalityPositive_" ("_$NORMALIZE((iKnowRatingHospitalityPositive / (iKnowRatingHospitalityPositive + iKnowRatingHospitalityNegative) * 100), 0)_"%*), "					  
								  
		}
		else 
		{
			set hospitalityText = $case(var,
								  1:"отметили плохое отношение персонала",
								  2:"не порнавилось отношение персонала",
								  3:"отметили негостеприимность персонала",
								  4:"остались недовольны работой персонала",
								  5:"низко оценили уровень работы персонала",
								  6:"не понравилось отношение персонала отеля")
								  
			set hospitalityText = hospitalityText_" - "_iKnowRatingHospitalityNegative_" ("_$NORMALIZE((iKnowRatingHospitalityNegative / (iKnowRatingHospitalityPositive + iKnowRatingHospitalityNegative) * 100), 0)_"%*), "								  
		}	
	}
	
	set var = $random(6) + 1
	
	if (((iKnowRatingServicePositive + iKnowRatingServiceNegative)/ reviewCount) > 0)
	{
		if (iKnowRatingServicePositive > iKnowRatingServiceNegative) 
		{
			set serviceText = $case(var,
								  1:"понравилось рзнообразие и качество услуг",
								  2:"отметили высокий уровень сервиса",
								  3:"остались довольны качеством услуг",
								  4:"высоко оценили качество предоставляемых услуг",
								  5:"высоко оценили уровень сервиса",
								  6:"положительно оценили качество сервиса")
			
			set serviceText = serviceText_" - "_iKnowRatingServicePositive_" ("_$NORMALIZE((iKnowRatingServicePositive / (iKnowRatingServicePositive + iKnowRatingServiceNegative) * 100), 0)_"%*)"					  
								  
		}
		else 
		{
			set serviceText = $case(var,
								  1:"не понравилось рзнообразие и качество услуг",
								  2:"отметили невысокий уровень сервиса",
								  3:"остались недовольны качеством услуг",
								  4:"низко оценили качество предоставляемых услуг",
								  5:"низко оценили уровень сервиса",
								  6:"отрицательно оценили качество сервиса")
								  
			set serviceText = serviceText_" - "_iKnowRatingServiceNegative_" ("_$NORMALIZE((iKnowRatingServiceNegative / (iKnowRatingServicePositive + iKnowRatingServiceNegative) * 100), 0)_"%*)"								  
		}	
	}	
	
	set var = $random(2) + 1
	
	set extraText = $case(var, 1:" А красивых рыбок никто не оценил, потому что мы о них не спрашивали.",
							   2:" Не забудьте перед поездкой запастись кремом для загара.")
							   
	set var = $random(5) + 1	
	
	if (var '= 1) { set extraText = ""}
	
	set finalText = finalText_comfortText_foodText_hospitalityText_serviceText_"."_extraText
	
	return finalText
}*/
]]></Content>
</UDLText>

<Storage name="Default">
<Description>
The method of obtaining the final phrase about the phone.
phoneId - Phone ID</Description>
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Phones.Stat.PhoneD</DataLocation>
<DefaultData>PhoneDefaultData</DefaultData>
<IdLocation>^ikra.Phones.Stat.PhoneD</IdLocation>
<IndexLocation>^ikra.Phones.Stat.PhoneI</IndexLocation>
<StreamLocation>^ikra.Phones.Stat.PhoneS</StreamLocation>
<Data name="PhoneDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PhoneId</Value>
</Value>
<Value name="3">
<Value>PhoneName</Value>
</Value>
<Value name="4">
<Value>UserRating</Value>
</Value>
<Value name="5">
<Value>iKnowRating</Value>
</Value>
<Value name="6">
<Value>iKnowEmarkersRating</Value>
</Value>
<Value name="7">
<Value>iKnowRatingComfort</Value>
</Value>
<Value name="8">
<Value>iKnowRatingPerfomance</Value>
</Value>
<Value name="9">
<Value>iKnowRatingLink</Value>
</Value>
<Value name="10">
<Value>iKnowRatingCamera</Value>
</Value>
<Value name="11">
<Value>ReviewsCount</Value>
</Value>
<Value name="12">
<Value>NegativeReviewsPCT</Value>
</Value>
<Value name="13">
<Value>PositiveReviewsPCT</Value>
</Value>
<Value name="14">
<Value>NeutralReviewsPCT</Value>
</Value>
<Value name="15">
<Value>SentComfort</Value>
</Value>
<Value name="16">
<Value>SentPerfomance</Value>
</Value>
<Value name="17">
<Value>SentLink</Value>
</Value>
<Value name="18">
<Value>SentCamera</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Phones.Stat.PhoneStat">
<Super>%Persistent</Super>
<TimeChanged>63703,50457.626347</TimeChanged>
<TimeCreated>63703,50455.952538</TimeCreated>

<Property name="PhoneId">
<Description>
Phone ID</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Index name="phoneIdIndex">
<Properties>PhoneId</Properties>
<Unique>1</Unique>
</Index>

<Property name="PhoneName">
<Description>
Hotel Name</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="PositiveMarkersSum">
<Description>
Positive markers sum in the review.</Description>
<Type>%Numeric</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="NegativeMarkersSum">
<Description>
Negative markers sum in the review.</Description>
<Type>%Numeric</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="EmotionalSum">
<Description>
Total emotional markers sum in the review.</Description>
<Type>%Numeric</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="NumberOfSentences">
<Description>
Number of sentences in the review.</Description>
<Type>%Numeric</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="NumberOfEntities">
<Description>
Number of entities in the review.</Description>
<Type>%Numeric</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="EmotionalSaturation">
<Description>
Emotional saturation of the review.</Description>
<Type>%Numeric</Type>
<Calculated>1</Calculated>
<InitialExpression>0</InitialExpression>
<SqlComputeCode>set {EmotionalSaturation} = {EmotionalSum} / {NumberOfEntities}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="PositiveEmotionalSaturation">
<Description>
Positive emotional saturation of the review.</Description>
<Type>%Numeric</Type>
<Calculated>1</Calculated>
<InitialExpression>0</InitialExpression>
<SqlComputeCode>set {PositiveEmotionalSaturation} = {PositiveMarkersSum} / {NumberOfEntities}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="NegativeEmotionalSaturation">
<Description>
Negative emotional saturation of the review.</Description>
<Type>%Numeric</Type>
<Calculated>1</Calculated>
<InitialExpression>0</InitialExpression>
<SqlComputeCode>set {NegativeEmotionalSaturation} = {NegativeMarkersSum} / {NumberOfEntities}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Phones.Stat.PhoneStatD</DataLocation>
<DefaultData>PhoneStatDefaultData</DefaultData>
<IdLocation>^ikra.Phones.Stat.PhoneStatD</IdLocation>
<IndexLocation>^ikra.Phones.Stat.PhoneStatI</IndexLocation>
<StreamLocation>^ikra.Phones.Stat.PhoneStatS</StreamLocation>
<Data name="PhoneStatDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PhoneId</Value>
</Value>
<Value name="3">
<Value>PhoneName</Value>
</Value>
<Value name="4">
<Value>PositiveMarkersSum</Value>
</Value>
<Value name="5">
<Value>NegativeMarkersSum</Value>
</Value>
<Value name="6">
<Value>EmotionalSum</Value>
</Value>
<Value name="7">
<Value>NumberOfSentences</Value>
</Value>
<Value name="8">
<Value>NumberOfEntities</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Phones.Stat.ProcessingResult">
<Super>%Persistent</Super>
<TimeChanged>63703,58538.613872</TimeChanged>
<TimeCreated>63703,49792.627948</TimeCreated>

<Property name="DomainName">
<Description>
Domain name</Description>
<Type>%String</Type>
</Property>

<Property name="EDictionarySize">
<Description>
Emarkers dictionary size.</Description>
<Type>%Integer</Type>
</Property>

<Property name="FDictionarySize">
<Description>
Fmarkers dictionary size</Description>
<Type>%Integer</Type>
</Property>

<Property name="EmotionalIndex">
<Description>
Emotional index (Ratio of the average saturation of reviews to the size of the dictionary.)</Description>
<Type>%Numeric</Type>
</Property>

<Property name="PositiveIndex">
<Description>
Positive emotional index</Description>
<Type>%Numeric</Type>
</Property>

<Property name="NegativeIndex">
<Description>
Negative emotional index</Description>
<Type>%Numeric</Type>
</Property>

<Property name="NumberOfSources">
<Description>
Number of sources</Description>
<Type>%Integer</Type>
</Property>

<Property name="Negation">
<Description>
The Negation flag</Description>
<Type>%String</Type>
</Property>

<Property name="CorrelationPhone">
<Type>%Numeric</Type>
</Property>

<Property name="CorrelationComfort">
<Type>%Numeric</Type>
</Property>

<Property name="CorrelationPerfomance">
<Type>%Numeric</Type>
</Property>

<Property name="CorrelationLink">
<Type>%Numeric</Type>
</Property>

<Property name="CorrelationCamera">
<Type>%Numeric</Type>
</Property>

<Property name="ProcessingDateTime">
<Description>
Timestamp of processing endtime.</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="CaclAlgorithm">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.PhE6BE.ProcessingRCBCAD</DataLocation>
<DefaultData>ProcessingResultDefaultData</DefaultData>
<IdLocation>^ikra.PhE6BE.ProcessingRCBCAD</IdLocation>
<IndexLocation>^ikra.PhE6BE.ProcessingRCBCAI</IndexLocation>
<StreamLocation>^ikra.PhE6BE.ProcessingRCBCAS</StreamLocation>
<Data name="ProcessingResultDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DomainName</Value>
</Value>
<Value name="3">
<Value>EDictionarySize</Value>
</Value>
<Value name="4">
<Value>FDictionarySize</Value>
</Value>
<Value name="5">
<Value>EmotionalIndex</Value>
</Value>
<Value name="6">
<Value>PositiveIndex</Value>
</Value>
<Value name="7">
<Value>NegativeIndex</Value>
</Value>
<Value name="8">
<Value>NumberOfSources</Value>
</Value>
<Value name="9">
<Value>Negation</Value>
</Value>
<Value name="10">
<Value>CorrelationComfort</Value>
</Value>
<Value name="11">
<Value>CorrelationPerfomance</Value>
</Value>
<Value name="12">
<Value>CorrelationLink</Value>
</Value>
<Value name="13">
<Value>CorrelationCamera</Value>
</Value>
<Value name="14">
<Value>ProcessingDateTime</Value>
</Value>
<Value name="15">
<Value>CaclAlgorithm</Value>
</Value>
<Value name="16">
<Value>CorrelationPhone</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Phones.Stat.Review">
<Super>%Persistent</Super>
<TimeChanged>63865,6065.779989</TimeChanged>
<TimeCreated>63702,54586.010689</TimeCreated>

<Property name="DomainName">
<Description>
Domain name</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="SourceId">
<Description>
Source ID</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Index name="PrimaryKey">
<PrimaryKey>1</PrimaryKey>
<Properties>DomainName,SourceId</Properties>
<Unique>1</Unique>
</Index>

<Property name="AuthorRating">
<Description>
Author's rating of phone.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowRating">
<Description>
Estimated rating of phone.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowEmarkersRating">
<Description>
Estimated rating of phone without excluding functional markers.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowRatingComfort">
<Description>
Estimated rating of comfort.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowRatingPerfomance">
<Description>
Estimated rating of perfomance.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowRatingLink">
<Description>
Estimated rating of link.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="iKnowRatingCamera">
<Description>
Estimated rating of camera.</Description>
<Type>%Numeric</Type>
</Property>

<Property name="PhoneId">
<Type>%Integer</Type>
</Property>

<Property name="Suspect">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Usefulness">
<Type>%Numeric</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Phones.Stat.ReviewD</DataLocation>
<DefaultData>ReviewDefaultData</DefaultData>
<IdLocation>^ikra.Phones.Stat.ReviewD</IdLocation>
<IndexLocation>^ikra.Phones.Stat.ReviewI</IndexLocation>
<StreamLocation>^ikra.Phones.Stat.ReviewS</StreamLocation>
<Data name="ReviewDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DomainName</Value>
</Value>
<Value name="3">
<Value>SourceId</Value>
</Value>
<Value name="4">
<Value>AuthorRating</Value>
</Value>
<Value name="5">
<Value>iKnowRating</Value>
</Value>
<Value name="6">
<Value>iKnowEmarkersRating</Value>
</Value>
<Value name="7">
<Value>iKnowRatingComfort</Value>
</Value>
<Value name="8">
<Value>iKnowRatingPerfomance</Value>
</Value>
<Value name="9">
<Value>iKnowRatingLink</Value>
</Value>
<Value name="10">
<Value>iKnowRatingCamera</Value>
</Value>
<Value name="11">
<Value>PhoneId</Value>
</Value>
<Value name="12">
<Value>Suspect</Value>
</Value>
<Value name="13">
<Value>Usefulness</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Phones.Stat.ReviewStat">
<Super>%Persistent</Super>
<TimeChanged>63703,49513.090733</TimeChanged>
<TimeCreated>63703,49474.95789</TimeCreated>

<Property name="ReviewId">
<Description>
Review ID.</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Index name="ReviewIdIndex">
<Properties>ReviewId</Properties>
<Unique>1</Unique>
</Index>

<Property name="PhoneId">
<Description>
Phone ID.</Description>
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="PhoneName">
<Description>
Phone Name.</Description>
<Type>%String</Type>
</Property>

<Index name="PhoneNameIndex">
<Properties>PhoneName</Properties>
</Index>

<Property name="PositiveMarkersSum">
<Description>
Positive markers sum in the review.</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="NegativeMarkersSum">
<Description>
Negative markers sum in the review.</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="EmotionalSum">
<Description>
Total emotional markers sum in the review.</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="NumberOfSentences">
<Description>
Number of sentences in the review.</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="NumberOfEntities">
<Description>
Number of entities in the review.</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="EmotionalSaturation">
<Description>
Emotional saturation of the review.</Description>
<Type>%Numeric</Type>
<Calculated>1</Calculated>
<InitialExpression>0</InitialExpression>
<SqlComputeCode>set {EmotionalSaturation} = {EmotionalSum} / {NumberOfEntities}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="PositiveEmotionalSaturation">
<Description>
Positive emotional saturation of the review.</Description>
<Type>%Numeric</Type>
<Calculated>1</Calculated>
<InitialExpression>0</InitialExpression>
<SqlComputeCode>set {PositiveEmotionalSaturation} = {PositiveMarkersSum} / {NumberOfEntities}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="NegativeEmotionalSaturation">
<Description>
Negative emotional saturation of the review.</Description>
<Type>%Numeric</Type>
<Calculated>1</Calculated>
<InitialExpression>0</InitialExpression>
<SqlComputeCode>set {NegativeEmotionalSaturation} = {NegativeMarkersSum} / {NumberOfEntities}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="iKnowRating">
<Type>%Numeric</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ikra.Hotels4531.ReviewStatD</DataLocation>
<DefaultData>ReviewStatDefaultData</DefaultData>
<IdLocation>^ikra.Hotels4531.ReviewStatD</IdLocation>
<IndexLocation>^ikra.Hotels4531.ReviewStatI</IndexLocation>
<StreamLocation>^ikra.Hotels4531.ReviewStatS</StreamLocation>
<Data name="ReviewStatDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ReviewId</Value>
</Value>
<Value name="3">
<Value>HotelId</Value>
</Value>
<Value name="4">
<Value>HotelName</Value>
</Value>
<Value name="5">
<Value>PositiveMarkersSum</Value>
</Value>
<Value name="6">
<Value>NegativeMarkersSum</Value>
</Value>
<Value name="7">
<Value>EmotionalSum</Value>
</Value>
<Value name="8">
<Value>NumberOfSentences</Value>
</Value>
<Value name="9">
<Value>NumberOfEntities</Value>
</Value>
<Value name="10">
<Value>iKnowRating</Value>
</Value>
<Value name="11">
<Value>PhoneId</Value>
</Value>
<Value name="12">
<Value>PhoneName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ikra.Phones.Stat.Statistics">
<Super>%RegisteredObject</Super>
<TimeChanged>63703,49651.125451</TimeChanged>
<TimeCreated>63703,49651.125451</TimeCreated>

<Method name="Min">
<ClassMethod>1</ClassMethod>
<FormalSpec>a:%Numeric,b:%Numeric</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	if (a < b) { return a }
	else 	   { return b }
]]></Implementation>
</Method>

<Method name="Mean">
<ClassMethod>1</ClassMethod>
<FormalSpec>valueList:%List</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	
	set sum = 0
	set length = $listlength(valueList)
	
	if (length = 0) { return ""}
	
	for i=1:1:length {
		set sum = sum + $list(valueList, i)
	}
	
	return sum / length
]]></Implementation>
</Method>

<Method name="Variance">
<ClassMethod>1</ClassMethod>
<FormalSpec>valueList:%List</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	set sum = 0
	set length = $listlength(valueList)
	set mean = ..Mean(valueList)
	
	if (length = 0) { return ""}
	
	for i=1:1:length {
		set sum = sum + $zpower(($list(valueList,i) - mean), 2)
	}	
	
	return sum / length
]]></Implementation>
</Method>

<Method name="StdDev">
<ClassMethod>1</ClassMethod>
<FormalSpec>valueList:%List</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[	return $zsqr(..Variance(valueList))
]]></Implementation>
</Method>

<Method name="Cov">
<ClassMethod>1</ClassMethod>
<FormalSpec>listX:%List,listY:%List</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	set meanX = ..Mean(listX)
	set meanY = ..Mean(listY)
	
	set sum = 0
	set n = ..Min($listlength(listX), $listlength(listY))
	
	for i=1:1:n {
		set sum = sum + (($list(listX, i) - meanX) * ($list(listY, i) - meanY))
	}
	
	return sum / n
]]></Implementation>
</Method>

<Method name="CorrelationCoefficient">
<ClassMethod>1</ClassMethod>
<FormalSpec>listX:%List,listY:%List</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	set covariation = ..Cov(listX, listY)
	set stdDevX = ..StdDev(listX)
	set stdDevY = ..StdDev(listY)
	
	return covariation / (stdDevX * stdDevY)
]]></Implementation>
</Method>
</Class>


<Class name="ikra.REST.Broker">
<Super>%CSP.REST</Super>
<TimeChanged>63943,35990.996167</TimeChanged>
<TimeCreated>63897,66797.1437</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>

 <Route Url="/category" Method="GET" Call="Category"/>
 
 <Route Url="/json/category" Method="GET" Call="ikra.REST.JSON:GetAllCategories"/>
 <Route Url="/json/newcategory" Method="POST" Call="ikra.REST.JSON:CreateCategory"/>
 <Route Url="/json/category/:catid" Method="DELETE" Call="ikra.REST.JSON:DeleteCategory"/>
 <Route Url="/json/category/:catid" Method="PUT" Call="ikra.REST.JSON:UpdateCategory"/>
 
 <Route Url="/json/concept/:cncptid" Method="GET" Call="ikra.REST.JSON:GetAllConcepts"/>
 <Route Url="/json/newconcept" Method="POST" Call="ikra.REST.JSON:CreateConcept"/>
 <Route Url="/json/concept/:cncptid" Method="DELETE" Call="ikra.REST.JSON:DeleteConcept"/>
 <Route Url="/json/concept/:cncptid" Method="PUT" Call="ikra.REST.JSON:UpdateConcept"/>
 
 <Route Url="/json/emotion" Method="GET" Call="ikra.REST.JSON:GetAllEmotions"/>
 <Route Url="/json/newemotion" Method="POST" Call="ikra.REST.JSON:CreateEmotion"/>
 <Route Url="/json/emotion/:emtid" Method="DELETE" Call="ikra.REST.JSON:DeleteEmotion"/>
 <Route Url="/json/emotion/:emtid" Method="PUT" Call="ikra.REST.JSON:UpdateEmotion"/>
 
 <Route Url="/uploadF" Method="POST" Call="ikra.REST.JSON:UploadFileFunctional"/>
 <Route Url="/uploadE" Method="POST" Call="ikra.REST.JSON:UploadFileEmotion"/>
 <Route Url="/downloadF" Method="GET" Call="ikra.REST.JSON:DownloadFileFunctional"/>
 <Route Url="/downloadE" Method="GET" Call="ikra.REST.JSON:DownloadFileEmotion"/>
 
 <Route Url="/json/domains" Method="GET" Call="ikra.REST.JSON:GetAllDomainNames"/>
 <Route Url="/json/compute/:domName" Method="POST" Call="ikra.REST.JSON:StartCompute"/>
 
 </Routes>
]]></Data>
</XData>

<Method name="Category">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*<Route Url="/json/categoryid" Method="GET" Call="ikra.REST.JSON:GetMaxIdCategory"/>*/
    &html<Работает!>
    quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ikra.REST.JSON">
<Super>%Base</Super>
<TimeChanged>64353,60438.162658</TimeChanged>
<TimeCreated>63897,67180.001599</TimeCreated>

<UDLText name="T">
<Content><![CDATA[/***************************************************************************************/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/********************************* Работа с категориями ********************************/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/***************************************************************************************/
]]></Content>
</UDLText>

<Method name="GetAllCategories">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try {
	   do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,"select * from ikra_dictionary.category order by CtgName")
   } catch ex {
       set st=ex.AsStatus()
   }
   quit st
]]></Implementation>
</Method>

<Method name="CreateCategory">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set content = %request.Content.Read($$$MaxStringLength)
	set content = $ZCVT(content,"I","UTF8") 
	
    s st=$$$OK
    try {
    	// Берём JSON из запроса и конвертируем в объект класса ikra.Dictionary.Category
    	$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,"ikra.Dictionary.Category",.obj,1))
    	$$$THROWONERROR(st,obj.%Save())
    } 
    catch ex {
        s st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<Method name="DeleteCategory">
<ClassMethod>1</ClassMethod>
<FormalSpec>catid:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st=$$$OK
    try {
        $$$THROWONERROR(st,##class(ikra.Dictionary.Category).%DeleteId(catid))
    } catch ex {
        s st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<Method name="UpdateCategory">
<ClassMethod>1</ClassMethod>
<FormalSpec>catid:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set content = %request.Content.Read($$$MaxStringLength)
	set content = $ZCVT(content,"I","UTF8") 
 	set st=$$$OK
 	try {
   
   		$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,,.obj,1))
   
   		// Открываем объект, который хотим отредакнировать
   		set ctg=##class(ikra.Dictionary.Category).%OpenId(catid)
   		throw:ctg=$$$NULLOREF ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001,"Category does not exist"))
    	// Редактируем и сохраняем
   		set ctg.CtgName=obj.CtgName
   		$$$THROWONERROR(st,ctg.%Save())
 	} 
 	catch ex {
   		set st=ex.AsStatus()
 	}
 	quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/***************************************************************************************/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/********************************* Работа с концептами *********************************/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/***************************************************************************************/
]]></Content>
</UDLText>

<Method name="GetAllConcepts">
<ClassMethod>1</ClassMethod>
<FormalSpec>cncptid:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try {
	   do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,"select * from ikra_dictionary.fmarker where CtgId = "_cncptid_" order by FName")
   } catch ex {
       set st=ex.AsStatus()
   }
   quit st
]]></Implementation>
</Method>

<Method name="CreateConcept">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set content = %request.Content.Read($$$MaxStringLength)
	set content = $ZCVT(content,"I","UTF8") 
	
    s st=$$$OK
    try {
    	// Берём JSON из запроса и конвертируем в объект класса ikra.Dictionary.Category
    	$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,"ikra.Dictionary.Fmarker",.obj,1))
    	$$$THROWONERROR(st,obj.%Save())
    } 
    catch ex {
        s st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<Method name="DeleteConcept">
<ClassMethod>1</ClassMethod>
<FormalSpec>cncptid:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st=$$$OK
    try {
        $$$THROWONERROR(st,##class(ikra.Dictionary.Fmarker).%DeleteId(cncptid))
    } catch ex {
        s st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<Method name="UpdateConcept">
<ClassMethod>1</ClassMethod>
<FormalSpec>cncptid:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set content = %request.Content.Read($$$MaxStringLength)
	set content = $ZCVT(content,"I","UTF8") 
 	set st=$$$OK
 	try {
   
   		$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,,.obj,1))
   
   		// Открываем объект, который хотим отредакнировать
   		set ctg=##class(ikra.Dictionary.Fmarker).%OpenId(cncptid)
   		throw:ctg=$$$NULLOREF ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001,"Concept does not exist"))
    	// Редактируем и сохраняем
   		set ctg.FName=obj.FName
   		$$$THROWONERROR(st,ctg.%Save())
 	} 
 	catch ex {
   		set st=ex.AsStatus()
 	}
 	quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/***************************************************************************************/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/********************************** Работа с эмоциями **********************************/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/***************************************************************************************/
]]></Content>
</UDLText>

<Method name="GetAllEmotions">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   try {
	   do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,"select * from ikra_dictionary.emarker order by EName")
   } catch ex {
       set st=ex.AsStatus()
   }
   quit st
]]></Implementation>
</Method>

<Method name="CreateEmotion">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set content = %request.Content.Read($$$MaxStringLength)
	set content = $ZCVT(content,"I","UTF8") 
	
    s st=$$$OK
    try {
    	// Берём JSON из запроса и конвертируем в объект класса ikra.Dictionary.Category
    	$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,"ikra.Dictionary.EMarker",.obj,1))
    	$$$THROWONERROR(st,obj.%Save())
    } 
    catch ex {
        s st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<Method name="DeleteEmotion">
<ClassMethod>1</ClassMethod>
<FormalSpec>emtid:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st=$$$OK
    try {
        $$$THROWONERROR(st,##class(ikra.Dictionary.EMarker).%DeleteId(emtid))
    } catch ex {
        s st=ex.AsStatus()
    }
    quit st
]]></Implementation>
</Method>

<Method name="UpdateEmotion">
<ClassMethod>1</ClassMethod>
<FormalSpec>emtid:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set content = %request.Content.Read($$$MaxStringLength)
	set content = $ZCVT(content,"I","UTF8") 
 	set st=$$$OK
 	try {
   
   		$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,,.obj,1))
   
   		// Открываем объект, который хотим отредакнировать
   		set ctg=##class(ikra.Dictionary.EMarker).%OpenId(emtid)
   		throw:ctg=$$$NULLOREF ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001,"Emotion does not exist"))
    	// Редактируем и сохраняем
    	set ctg.EValue=obj.EValue
   		set ctg.EName=obj.EName
   		$$$THROWONERROR(st,ctg.%Save())
 	} 
 	catch ex {
   		set st=ex.AsStatus()
 	}
 	quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/***************************************************************************************/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/********************************** Работа с файлами ***********************************/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/***************************************************************************************/
]]></Content>
</UDLText>

<Method name="UploadFileFunctional">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ($Data(%request.MimeData("file",1))) {
		do ##class(ikra.Dictionary.Fmarker).%KillExtent()
		do ##class(ikra.Dictionary.Category).%KillExtent()
		write "File contents, first line:"_$$$NL
		set stream = ##class(%Stream.FileCharacter).%New()
		set stream = %request.GetMimeData("file",1)
		while 'stream.AtEnd {
			set str = stream.ReadLine()
			set str = $ZCVT(str,"I","UTF8") 
			if (($piece(str, "#", 1) = "i") && ($piece(str, "#", 2) '= "END")) {
				set cName = $piece(str, "#", 2)
				&sql(INSERT INTO ikra_Dictionary.Category(CtgName) VALUES(:cName))
				&sql(SELECT ID INTO :cid FROM ikra_Dictionary.Category WHERE CtgName = :cName)
			}
			elseif ($piece(str, "#", 1) = "t") {
				set fName = $piece(str, "#", 2)
				&sql(INSERT INTO ikra_Dictionary.Fmarker(FName, CtgID) VALUES(:fName, :cid))
			}
		}
	}
    quit $$$OK
]]></Implementation>
</Method>

<Method name="UploadFileEmotion">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ($Data(%request.MimeData("file",1))) {
		do ##class(ikra.Dictionary.EMarker).%KillExtent()
		write "File contents, first line:"_$$$NL
		set stream = ##class(%Stream.FileCharacter).%New()
		set stream = %request.GetMimeData("file",1)
		while 'stream.AtEnd {
			set str = stream.ReadLine()
			set str = $ZCVT(str,"I","UTF8") 
			set eVal = $piece(str, "#", 1)
			set cName = $piece(str, "#", 2)
			set i = 1
			while ($piece(cName, ",", i) '= "") {
				set eName = $piece(cName, ",", i)
				set i = i + 1
				&sql(INSERT INTO ikra_Dictionary.EMarker(EName, EValue) VALUES(:eName, :eVal))
			}
		}
	}
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DownloadFileEmotion">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   set sFolder = "C:\InterSystems\Cache\CSP\ikra\files\emotion.txt"
   set stream = ##class(%Stream.FileCharacter).%New()
   set sc = stream.LinkToFile(sFolder)
   
   &sql(declare cur cursor for select EName, case when EValue > 0 then '+' || EValue else '' || EValue end into :ename, :evalue from ikra_dictionary.emarker order by EName)
   &sql(open cur)
   &sql(fetch cur)
	
	while (SQLCODE = 0) {
		do stream.WriteLine(evalue_"#"_ename)
		&sql(fetch cur)
		if (SQLCODE = 0) {
			do stream.WriteLine(evalue_"#"_ename)
			&sql(fetch cur)
		}	
	}
	
	&sql(close cur)
	do stream.%Save()
	
   
   write "files/emotion.txt"
   quit st
]]></Implementation>
</Method>

<Method name="DownloadFileFunctional">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   set sFolder = "C:\InterSystems\Cache\CSP\ikra\files\functional.txt"
   set stream = ##class(%Stream.FileCharacter).%New()
   set sc = stream.LinkToFile(sFolder)
   
   &sql(declare cur1 cursor for 
   	select case when tb.nm = 0 then 'i#' else 't#' end || tb.fname
   	into :str
	from
	(select ctg.ctgname, 1 nm, fmr.fname
	from ikra_dictionary.category ctg
	join ikra_dictionary.fmarker fmr on ctg.id = fmr.ctgid
	union all
	select ctgname, 0, ctgname
	from ikra_dictionary.category) tb
	order by ctgname, nm, fname)
   &sql(open cur1)
   &sql(fetch cur1)
	
	while (SQLCODE = 0) {
		do stream.WriteLine(str)
		&sql(fetch cur1)
	}
	do stream.Write("i#END")
	
	&sql(close cur1)
	do stream.%Save()
	
   
   write "files/functional.txt"
   quit st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/***************************************************************************************/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/********************************** Работа с доменами **********************************/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[/***************************************************************************************/
]]></Content>
</UDLText>

<Method name="GetAllDomainNames">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st = $$$OK
   //set ^tcnt = ^tcnt + 1
   //set ^tlog(^tcnt) = "+"
   
   set statement=##class(%SQL.Statement).%New()
   set status=statement.%PrepareClassQuery("%iKnow.Domain","GetAllDomains")
   if $$$ISERR(status) { do $system.OBJ.DisplayError(status) }
   set resultset=statement.%Execute()
   
   do ##class(ikra.Dictionary.Domains).%KillExtent()
   while resultset.%Next() {
	   set dName = resultset.%Get("domainName")
	   //set ^tlog(^tcnt) = ^tlog(^tcnt)_" "_dName
	   &sql(INSERT INTO ikra_Dictionary.Domains(dmnName) VALUES(:dName))
	}
   
   try {
	   do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,"select * from ikra_dictionary.domains order by dmnName")
   } catch ex {
       set st=ex.AsStatus()
   }
   
   quit st
]]></Implementation>
</Method>

<Method name="StartCompute">
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   set st=$$$OK
   
   do ##class(ikra.Phones.Processing.Processing).Start(domName)
   do ##class(ikra.util.DeepSeeUtils).updateDSCubes("IKRACube01")
   
   quit st
]]></Implementation>
</Method>
</Class>




<Class name="ikra.util.DeepSeeUtils">
<Description>
Методы работы с кубами аналитики</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63939,58789.055176</TimeChanged>
<TimeCreated>63939,58713.516405</TimeCreated>

<Method name="updateDSCubes">
<ClassMethod>1</ClassMethod>
<FormalSpec>cubeName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	#dim status As %Status
	set status = ##class(%DeepSee.Utils).%BuildCube(cubeName)
	quit status
]]></Implementation>
</Method>
</Class>


<Class name="ikra.util.main">
<Description>
general functions of iKnow domain creation</Description>
<IncludeCode>%IKPublic</IncludeCode>
<Super>%XML.Adaptor</Super>
<TimeChanged>63986,53519.662196</TimeChanged>
<TimeCreated>63702,52117.633112</TimeCreated>

<Method name="Create">
<Description>
Сохдание нового домена и конфигурации
domName - имя создаваемого домена, используется также при создании конфигурации с приставкой "conf",
domFolder - имя папки, где находятся файлы словарей, используемых при создании домена (пример пути "D:\intersystems\wPhones\")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,domFolder:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/* установка заначения пути к файлам словарей для домена, 
	выполняется 1 раз при создании домена, в последствии может быть заменена только вручную */
	
	set ^ikraDomainFolder(domName) = domFolder
	set ^ikraDomainFolder(domName,"loadNumber") = 0
	
	#dim confName As %String = "Conf"_domName
	#dim domain As %iKnow.Domain = ..CreateDomain(domName)
	#dim domId As %Integer = ..GetDomainId(domName)
	 
	if '($data(domId)) { return $$$ERROR("Domain does not exist.") }
	 
	write "ID of new domain: ", domId,!
	
	// Конфигурация создается для листера	
	#dim configuration As %iKnow.Configuration = ..CreateConfiguration(domName, confName) 
	
	return $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="LoadFile">
<Description>
Загрузка домена из файлов указанной директории
добавляет новые статьи в уже существующий домен, обновляет словари по актуальным версиям файлов
возвращает количество добавленных статей
domName - имя создаваемого домена, используется также при создании конфигурации с приставкой "conf", 
для обновления домена используются файлы: 
1. Sources.txt - список загружаемых rss-лент
2. Dictionary.txt -  список проверочных слов и выражений для разделения статей по темам
3. BlackList.txt - список слов и выражений, которые не будут распознаваться как концепты
4. Emotions.txt - список основ слов, характеризующих эмоциональную окраску статей
Все файлы находятся в папке ^ikraDomainFolder(domName)
writeLog - флаг записи лог-файла при обновлении. Log-файл с именем updateLog.txt в рабочем каталоге домена</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,domFolder:%String,sourceFilesPath:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[

	// Если домен не существует, создаем новый (так же создается конфигуация)	
	do ..CreateDomainIfNotExists(domName, domFolder)
	
	#dim confName As %String = "Conf"_domName
	#dim domId As %Integer = ##class(%iKnow.Domain).GetOrCreateId(domName)
	#dim initialNumOfSources As %Integer = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(domId)
	#dim listerFile As %iKnow.Source.File.Lister = ..CreateListerFile(domName, confName)				// листер File
	#dim loader As %iKnow.Source.Loader = ..CreateLoader(domName)	// лоадер создается для домена
	
	// Создаем словари для matching
	do ..CreateDictionaries(domName)
	// Формируем черные списки							
	//do ..CreateBlackLists(domName, "GeneralBlackList")			
	
	// Добавляем файл в список на обработку
	// 3 параметр - смотреть в подпапках, 4 - фильтр
	set status = listerFile.AddListToBatch(sourceFilesPath, $lb("txt"), 0, "") 
	
	// Если что-то не так, выдаем текст ошибки
	if '(status = $$$OK) 
	{ 
		zwrite status
	}
	
	// Запускаем обработку
	set status = loader.ProcessBatch()

	// Если что-то не так, выдаем текст ошибки	
	if '(status = $$$OK) 
	{
		zwrite status
	}
		
	// Матчим источники
	write "   matching sources...",!
	set status = ##class(%iKnow.Matching.MatchingAPI).MatchSources(domId)
		
	if (status = $$$OK)
	{
		write "   sources are matched",!	
	}
	else
	{
		write "Error, matching sources", status, !
	}		
		
	#dim numOfSources As %Integer = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(domId)

	// Статистика загруженных источников (было, загружено, стало)	
	write "Initial number of sources : ", initialNumOfSources,!
	write "Sources Added : ", numOfSources - initialNumOfSources,!
	write "Total : ", numOfSources,!
		
	return (numOfSources - initialNumOfSources)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="Free">
<Description>
Удаление домена со всем окружением
domName - имя домена</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	k ^ikraDomainFolder(domName)
	#dim confName As %String = "Conf"_domName

	// Удалаем поля метаданных	
	do ..RemoveMetaDataFields(domName)		
	// Удаляем словари для matching	
	do ..DeleteDictionaries(domName)
	// Удаляем черные списки				
	//do ..DeleteBlackLists(domName, "GeneralBlackList")	
	// Удаляем конфигурацию
	#dim status As %Status = ..DeleteConfiguration(confName)
	
	if (status '= $$$OK)	
	{	
		write "Cannot delete configuration :", confName, !	
	}
	
	// Удаляем домен
	set status = ..DeleteDomain(domName)
	
	if (status '= $$$OK)	
	{	
		write "Cannot delete configuration :", confName, !	
	}
	
	return status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="PrintDomainInfo">
<Description>
Выводит в консоль основную информацию о домене</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	if (##class(%iKnow.Domain).Exists(domName))
	{
		#dim domainID As %Integer = ##class(%iKnow.Domain).GetOrCreateId(domName)
	}
	else
	{
		write "   domain ",domName," does not exist",!
	}	
	
	#dim sourceNumber As %Integer = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(domainID)
	
	
	write "   domain name   = ", domName, !
	write "   domain ID     = ", domainID, !
	write "   domain folder = ", ^ikraDomainFolder(domName), !
	write "   sources       = ", sourceNumber, !
	
	return $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="CreateDomain">
<Description>
Создание нового домена
domName - имя создаваемого домена</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%iKnow.Domain</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Domain).Exists(domName))
	{
		#dim domain As %iKnow.Domain = ##class(%iKnow.Domain).Open(domName)
		write "   open domain ", domName, " ", !
	}
	else
	{
		set domain = ##class(%iKnow.Domain).%New(domName)
		do domain.%Save()
		do domain.SetParameter($$$IKPSTEMMING, 1)
		write "   stemming is ON",!	
		do domain.%Save()		
		write "   domain ", domName, " created!", !
	}
	return domain
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="DeleteDomain">
<Description>
Удаление домена со всеми данными
domName - имя удаляемого домена</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Domain).Exists(domName)) {
		set domain  = ##class(%iKnow.Domain).Open(domName)
		set domainId = domain.Id
		set tSC = ##class(%iKnow.Domain).DeleteId(domainId)	
		
		if (tSC = $$$OK) {
			write "Domain ", domName, " deleted successfully.", !
			return $$$OK
		}
		else {
			write "Error: failed to delete domain ", domName, !
			return $$$ERROR()
		}
	}
	else {
		write "Domain ", domName, " doesn't exist", !
		return $$$ERROR()
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="CreateConfiguration">
<Description>
Создание конфигурации, используется при создании листера
domName - имя текущего домена
confName - имя создаваемой конфигурации</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,confName:%String</FormalSpec>
<ReturnType>%iKnow.Configuration</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Configuration).Exists(confName))
	{
		#dim configuration AS %iKnow.Configuration = ##class(%iKnow.Configuration).Open(confName)
		write "   open congiguration ",confName," ",!
	}
	else
	{
		//#dim filename As %String = ^ikraDomainFolder(domName)_"Substitution.txt"
		
		/*set userDictionaryName = "MyUserDict" 
		
		set udict = ..CreateUserDictionary(userDictionaryName)*/
	
		//s configuration = ##class(%iKnow.Configuration).%New(confName,0,"ru",udict.Name,1)
		s configuration = ##class(%iKnow.Configuration).Create(confName,0,"ru")
		//set configuration = ##class(%iKnow.Configuration).%New(confName,1,$lb("en","ru"),filename,1)		
		//s configuration = ##class(%iKnow.Configuration).%New(confName,0,"ru")
		//set configuration.StemmingConfig = "DEFAULT"
		do configuration.%Save()
		write "   configuration ",confName," created!",!
	}
	
	return configuration
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="DeleteConfiguration">
<Description>
Удаление конфигурации
confName - имя удаляемой конфигурации</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>confName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Configuration).Exists(confName))
	{
		#dim configuration As %iKnow.Configuration = ##class(%iKnow.Configuration).Open(confName)
		#dim configurationId As %Integer = configuration.Id
		#dim status As %Status = ##class(%iKnow.Configuration).DeleteId(configurationId)
		
		if (status = $$$OK)
		{
			write "   configuration ",confName," deleted",!
			return $$$OK
		}
		else
		{
			write "   Error: failed to delete configuration ",confName,!
			return $$$ERROR()
		}
	}
	else
	{
		write "   configuration ",confName," doesn't exist",!
		return $$$OK
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="CreateLoader">
<Description>
Создание лоадера, создается для домена (по имени домена)
domName - имя домена, для которого создается загрузчик</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%iKnow.Source.Loader</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Domain).Exists(domName)) 
	{
		#dim domainId As %Integer = ##class(%iKnow.Domain).GetOrCreateId(domName)
	} 
	else 
	{
		write "Error: domain " + domName + " not found"
		return NULL
	}
	
	#dim loader As %iKnow.Source.Loader = ##class(%iKnow.Source.Loader).%New(domainId)	

	return loader
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="CreateListerFile">
<Description>
Создание файлового листера, создается для домена (по имени домена)
domName - имя домена, для которого создается листер
confName - имя конфигурации, которая будет применяться в листере</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,confName:%String,converter:%Integer=1</FormalSpec>
<ReturnType>%iKnow.Source.File.Lister</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Domain).Exists(domName)) 
	{
		#dim domainId As %Integer = ##class(%iKnow.Domain).GetOrCreateId(domName)
	} 
	else 
	{
		write "Error: domain " + domName + " not found"
		return NULL
	}
	
	#dim lister As %iKnow.Source.File.Lister = ##class(%iKnow.Source.File.Lister).%New(domainId)	
	
	do lister.SetConfig(confName)
	
	write "   lister created!",!
	
	return lister
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="SetMetaDataFields">
<Description>
Установка дополнительных полей метаданных для статей, возвращает количество созданных полей данных
domName - имя домена, в котором проводится действие
редактировать совместно с ..RemoveMetaDataFields</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#Include %IKPublic	
	if (##class(%iKnow.Domain).Exists(domName)) {
		set domainId = ##class(%iKnow.Domain).GetOrCreateId(domName)
	} else {
		write "Error: domain " + domName + " not found"
		return 0
	}	
	set val = ##class(%iKnow.Queries.MetadataAPI).AddField( domainId,"PubDate",,$$$MDDTDATE )
	set val = ##class(%iKnow.Queries.MetadataAPI).AddField( domainId,"Title",,$$$MDDTSTRING )
	set val = ##class(%iKnow.Queries.MetadataAPI).AddField( domainId,"Link",,$$$MDDTSTRING )
	set val = ##class(%iKnow.Queries.MetadataAPI).AddField( domainId,"Agency",,$$$MDDTSTRING )	
	set val = ##class(%iKnow.Queries.MetadataAPI).AddField( domainId,"Topic",,$$$MDDTSTRING )
	set val = ##class(%iKnow.Queries.MetadataAPI).AddField( domainId,"Category",,$$$MDDTSTRING )
	
	// 1 is standard DataIndexed, plus 6 added manually
	if (val = 7)
	{
		write "all metadata fields are created - total ", val, !
	}
	else
	{
		write "errors creating metadata fields - total ", val, !
	}
	return val
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="RemoveMetaDataFields">
<Description>
Удаление дополнительных полей, используется при обновлении и удалении домена, возвращает число удаленных полей
domName - имя домена, в котором проводится действие
редактировать совместно с ..SetMetaDataFields</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Domain).Exists(domName)) 
	{
		#dim domainId As %Integer = ##class(%iKnow.Domain).GetOrCreateId(domName)
	} 
	else 
	{
		write "Error: domain " + domName + " not found"
		return 0
	}
	
	#dim status As %Status = ##class(%iKnow.Queries.MetadataAPI).RemoveField( domainId,"PubDate" )
	set status = status + ##class(%iKnow.Queries.MetadataAPI).RemoveField( domainId,"Title" )
	set status = status + ##class(%iKnow.Queries.MetadataAPI).RemoveField( domainId,"Link" )
	set status = status + ##class(%iKnow.Queries.MetadataAPI).RemoveField( domainId,"Agency" )
	set status = status + ##class(%iKnow.Queries.MetadataAPI).RemoveField( domainId,"Topic" )
	set status = status + ##class(%iKnow.Queries.MetadataAPI).RemoveField( domainId,"Category" )
	
	if (status = 6)
	{
		write "all metadata fields are deleted",!
	}
	else
	{
		write "errors in deleting metadata fields",!
	}
		
	return status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="CreateDictionaries">
<Description>
создание словарей по файлу, путь к файлу ^ikraDomainFolder(domName) + "Dictionary.txt"
domName - имя домена, в котором проводится действие
формат файла, идентификаторы строк: "!" - комментарий, "d" - словарь, "i"-группа терминов, "t"-термин</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	if (##class(%iKnow.Domain).Exists(domName)) 
	{
		#dim domainId As %Integer = ##class(%iKnow.Domain).GetOrCreateId(domName)
	} 
	else 
	{
		write "Error: domain " + domName + " not found"
		return $$$ERROR()
	}
	
	#dim filename As %String = ^ikraDomainFolder(domName)_"Dictionary.txt"
	#dim stream As %Stream.FileCharacter = ##class(%Stream.FileCharacter).%New()
	set sc = stream.LinkToFile(filename)
	
	set i = 0
	
	#dim dictId = 0
	#dim itemId = 0
	#dim language = 0
		
	while '(stream.AtEnd) 
	{		
		set line = stream.ReadLine()
		
		// проверка строки на комментарий (начинается с !)		
		set checkComment = $PIECE(line,"!",1,1)
		if (checkComment="") {continue}
		
		// обработка строки
		set stype = $piece(line,"#",1)
		set i = i + 1
		
		if (stype="d") 
		{
			// добавляем словарь
			set language = $piece(line,"#",4)
			set dictId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionary( domainId, $piece(line,"#",2), $piece(line,"#",3),language,"",.status )
			write "   dictionary ", $piece(line,"#",2), " created",!
		}		// elseif (stype="d")
		elseif (stype="i") 
		{
			// добавляем item
			set ref = ""
			set itemId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryItem( domainId, dictId, $piece(line,"#",2), .ref, language)
		}		// elseif (stype="i")
		elseif (stype="t") 
		{
			// парсим строку с терминами, разделенными запятой
			set dList = $piece(line,"#",2)
			set j = 1
			while $piece(dList,",",j)'="" 
			{	
				set termId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryTerm( domainId, itemId, $piece(dList,",",j), language)	
				set j = j + 1
			}
		}		// elseif (stype="t")
	}		// 'stream.AtEnd
			
	return $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="DeleteDictionaries">
<Description>
удаление словарей
domName - имя домена, в котором проводится действие</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Domain).Exists(domName)) {
		set domainId = ##class(%iKnow.Domain).GetOrCreateId(domName)
	} else {
		write "Error: domain " + domName + " not found"
		return $$$ERROR()
	}
	
	do ##class(%iKnow.Matching.DictionaryAPI).DropAllDictionaryData(domainId)
	write "   all dictionaries are deleted",!
	return $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="UpdateDictionaries">
<Description>
обновление словарей, вместо старых словарей формируются новые по файлу dictionary.txt, затем проводится переиндексация статей в домене
domName - имя домена, в котором проводится действие</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..DeleteDictionaries(domName)			// удаляем словари для matching
	do ..CreateDictionaries(domName)			// создаются словари для matching
	
	if (##class(%iKnow.Domain).Exists(domName)) {
		set domainId = ##class(%iKnow.Domain).GetOrCreateId(domName)
	} else {
		write "Error: domain " + domName + " not found"
		return $$$ERROR()
	}
		
	write "   matching sources...",!
	set status = ##class(%iKnow.Matching.MatchingAPI).MatchSources(domainId)	
	if (status = 1)
	{
		write "   sources are matched",!	
	}
	else
	{
		write "Error, matching sources", status, !	
	}
	set numOfSources = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(domainId)
	write "Sources Loaded : ", numOfSources,!
	
	return $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="CreateBlackLists">
<Description>
Метод создаёт черные списки по файлу BlackList.txt, 
содержит построчно перечисленные термины, "!" - в начале строки символ комментария
domName - имя домена, в котором проводится действие
BLName - имя формируемого в домене черного списка</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,BLName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Domain).Exists(domName)) {
		set domainId = ##class(%iKnow.Domain).GetOrCreateId(domName)
	} else {
		write "Error: domain " + domName + " not found"
		return $$$ERROR()
	}
	
	set blackListId = ##class(%iKnow.Utils.MaintenanceAPI).CreateBlackList(domainId, BLName)
	
	set filename = ^ikraDomainFolder(domName)_"BlackList.txt"
	set stream = ##class(%Stream.FileCharacter).%New()
	set sc = stream.LinkToFile(filename)
	
	while 'stream.AtEnd {		
		set line = stream.ReadLine()
		
		// порверка строки на комментарий, определяется "!" в начале строки
		set checkComment = $PIECE(line,"!",1,1)
		if (checkComment="") {continue}
		
		set sc = ##class(%iKnow.Utils.MaintenanceAPI).AddStringToBlackList(domainId, blackListId, line)
		write "   line: ",line," added to black list",!
	}

	return $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="DeleteBlackLists">
<Description>
Метод удаляет черный список
domName - имя домена, в котором проводится действие
BLName - имя удаляемого в домене черного списка</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,BLName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Domain).Exists(domName)) {
		set domainId = ##class(%iKnow.Domain).GetOrCreateId(domName)
	} else {
		write "Error: domain " + domName + " not found"
		return $$$ERROR()
	}
	
	if ( 0 = ##class(%iKnow.Utils.MaintenanceAPI).HasBlackLists(domName) )
	{
		write "   no black lists found",!
		return $$$OK	
	}
	set blackListId = ##class(%iKnow.Utils.MaintenanceAPI).GetBlackListId(domainId, BLName)
	set sc = ##class(%iKnow.Utils.MaintenanceAPI).DropBlackList(domainId, blackListId)
	
	if (sc=$$$OK)
	{	
		write "   black list deleted",!}
	else 
	{
		write "Error deleting black list",!
		write sc,!
	}
	
	return $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="UpdateBlackLists">
<Description>
Метод обновляет или создаёт черные списки по файлу BlackList.txt, 
содержит построчно перечисленные термины, "!" - в начале строки символ комментария
domName - имя домена, в котором проводится действие
BLName - имя формируемого в домене черного списка</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,BLName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Domain).Exists(domName)) {
		set domainId = ##class(%iKnow.Domain).GetOrCreateId(domName)
	} else {
		write "Error: domain " + domName + " not found"
		return $$$ERROR()
	}
	
	set sc = ..DeleteBlackLists(domName, BLName)
	if (sc = $$$OK)
	{
		write "BlackList ",BLName, " deleted",!	
	}
	
	set sc = ..CreateBlackLists(domName, BLName)
	if (sc = $$$OK)
	{
		write "BlackList ",BLName, " created",!	
	}	

	return $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =================================================================================================

]]></Content>
</UDLText>

<Method name="GetDomainId">
<Description>
Метод, возвращающий DomainId по имени домена.
domName - имя домена.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	// Проверяем, существует ли домен. 
	// Если да - возвращаем id.
	// Если нет - выдаем ошибку, что такого домена нет.
	if (##class(%iKnow.Domain).Exists(domName)) 
	{
		#dim domId As %Integer = ##class(%iKnow.Domain).GetOrCreateId(domName)
	}
	else 
	{
		write "Error: domain " + domName + " not found"
		return ""
	}
	 
	return domId
]]></Implementation>
</Method>

<Method name="CreateDomainIfNotExists">
<Description>
Метод инициализации домена.
Если домен не существует, создаем новый с конфигурацией по указанной папке.
Вызывается в методах LoadRSS(), LoadDomain(), LoadFile(), TransferDomain()
domName - имя домена
domFolder - путь к папке домена</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domName:%String,domFolder:%String</FormalSpec>
<Implementation><![CDATA[
	if '(##class(%iKnow.Domain).Exists(domName)) 
	{
		write "Domain " _ domName _ " does not exist.", !
		
		if '($data(domFolder)) 
		{
			write "Please, specify the domain folder.", !
			write "Ex.: Load(""MyDomain"", ""D:\intersystems\wPhones\Example\"")", !
			
			return $$$ERROR("The domain's folder does not specified.")
		}
		else 
		{
			write "Creating new domain: " _ domName, !
				
			#dim status As %Status = ..Create(domName, domFolder)
			
			if (status = $$$OK) 
			{
				write "New domain " _ domName _ " was created successfully.", !	
			}
			else 
			{
				return status
			}
		}	
		
	}
]]></Implementation>
</Method>

<Method name="CreateUserDictionary">
<Description>
Метод, производящий инициализацию пользовательского словаря
userDictionaryName - имя пользовательского словаря</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>userDictionaryName:%String</FormalSpec>
<ReturnType>%iKnow.UserDictionary</ReturnType>
<Implementation><![CDATA[
		
		// Пробуем открыть существующий словарь
		set udict = ##class(%iKnow.UserDictionary).OpenByName(userDictionaryName) 
		
		// Если получилось, то удаляем его 
		// (так как мы не знаем, что в нем содержится, лучше создать новый)
		if (udict '= "")
		{
			do ##class(%iKnow.UserDictionary).%DeleteId(udict.Id)
		}
		
		// Создаем новый словарь
		set udict = ##class(%iKnow.UserDictionary).%New(userDictionaryName) 
		do udict.%Save()
		
		// Заполняем словарь элементами
		do udict.AddEntry("))))",".")
		do udict.AddEntry(")))",".")
		do udict.AddEntry("))",".")
		do udict.AddEntry(". ",".")
		do udict.AddEntry(".....",".")
		do udict.AddEntry("...",".")
		do udict.AddEntry("..",".")
		do udict.AddEntry(".",". ")
		do udict.AddEntry("!!!!!","!")
		do udict.AddEntry("!!!","!")
		do udict.AddEntry("!!","!")
		do udict.AddEntry("!","! ")
		do udict.AddEntry("?????","?")
		do udict.AddEntry("???","?")
		do udict.AddEntry("??","?")
		do udict.AddEntry("?","? ")
		do udict.AddEntry(",",", ")
		
		//Сохраняем словарь
		do udict.%Save()
		
		write "UserDictionary created!", !
		
		return udict
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===========================================================================================

]]></Content>
</UDLText>

<Storage name="Default">
</Storage>
</Class>
</Export>
